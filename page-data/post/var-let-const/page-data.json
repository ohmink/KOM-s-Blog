{
    "componentChunkName": "component---src-pages-post-mdx-slug-js",
    "path": "/post/var-let-const/",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"description\": \"JavaScript에서 변수를 선언하는 세 가지 방식 var, let, const에 대해 공부하고 정리한 것\",\n  \"title\": \"JavaScript에서 변수를 선언하는 세 가지 방식\",\n  \"tag\": [\"Javascript\"],\n  \"date\": \"2021-02-10\",\n  \"summary\": \"JavaScript에서 변수를 선언하는 세 가지 방식 var, let, const에 대해 공부하고 정리해보자\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"JavaScript\\uC5D0\\uC11C \\uBCC0\\uC218\\uB97C \\uC120\\uC5B8\\uD558\\uB294 \\uC138 \\uAC00\\uC9C0 \\uBC29\\uC2DD\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://poiemaweb.com/es6-block-scope\"\n  }, \"https://poiemaweb.com/es6-block-scope\"), \" \\uC744 \\uD1A0\\uB300\\uB85C \\uACF5\\uBD80\\uD55C \\uB0B4\\uC6A9\\uC744 \\uC815\\uB9AC\\uD55C \\uAC83\\uC785\\uB2C8\\uB2E4.\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\uD0A4\\uC6CC\\uB4DC : \\uC2A4\\uCF54\\uD504, \\uD638\\uC774\\uC2A4\\uD305, TDZ\")), mdx(\"h2\", null, \"var? let? const?\"), mdx(\"p\", null, \"var \\uD0A4\\uC6CC\\uB4DC\\uB294 ES5\\uAE4C\\uC9C0 \\uC0AC\\uC6A9\\uD558\\uB358 \\uBC29\\uBC95\\uC774\\uB2E4.\\n4\\uAC00\\uC9C0 \\uD2B9\\uC9D5\\uC744 \\uAC00\\uC9C0\\uACE0 \\uC788\\uC73C\\uBA70, \\uC2EC\\uAC01\\uD55C \\uBB38\\uC81C\\uB97C \\uC77C\\uC73C\\uD0AC \\uC218 \\uC788\\uB2E4.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uBCF4\\uD1B5 \\uC804\\uC5ED \\uC2A4\\uCF54\\uD504\\uC5D0\\uC11C \\uBC1C\\uC0DD\\uD558\\uB294 \\uBB38\\uC81C\\uC778\\uB370, ES6\\uC5D0\\uC11C\\uB294 var\\uC758 \\uBB38\\uC81C\\uB97C \\uD574\\uACB0\\uD558\\uAE30 \\uC704\\uD574 \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"let\\uACFC const\"), \"\\uB97C \\uB3C4\\uC785\\uD588\\uB2E4.\")), mdx(\"h3\", null, \"1. \\uD568\\uC218 \\uB808\\uBCA8 \\uC2A4\\uCF54\\uD504 (\\uC911\\uC694)\"), mdx(\"h4\", null, \"var \\uD0A4\\uC6CC\\uB4DC\\uB294 \\uD568\\uC218 \\uB808\\uBCA8 \\uC2A4\\uCF54\\uD504\\uB97C \\uB530\\uB978\\uB2E4.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\uD568\\uC218 \\uB808\\uBCA8 \\uC2A4\\uCF54\\uD504(Function-level scope)\\n\\uD568\\uC218 \\uB0B4\\uC5D0\\uC11C \\uC120\\uC5B8\\uB41C \\uBCC0\\uC218\\uB294 \\uD568\\uC218 \\uB0B4\\uC5D0\\uC11C\\uB9CC \\uC720\\uD6A8\\uD558\\uBA70 \\uD568\\uC218 \\uC678\\uBD80\\uC5D0\\uC11C\\uB294 \\uCC38\\uC870\\uD560 \\uC218 \\uC5C6\\uB2E4. \\uC989, \\uD568\\uC218 \\uB0B4\\uBD80\\uC5D0\\uC11C \\uC120\\uC5B8\\uD55C \\uBCC0\\uC218\\uB294 \\uC9C0\\uC5ED \\uBCC0\\uC218\\uC774\\uBA70 \\uD568\\uC218 \\uC678\\uBD80\\uC5D0\\uC11C \\uC120\\uC5B8\\uD55C \\uBCC0\\uC218\\uB294 \\uBAA8\\uB450 \\uC804\\uC5ED \\uBCC0\\uC218\\uC774\\uB2E4.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"var test = 'test'; // \\uC804\\uC5ED \\uBCC0\\uC218\\nconsole.log(test); // test\\n\\n{\\n  var test = 'change'; // \\uC804\\uC5ED \\uBCC0\\uC218\\n}\\nconsole.log(test); // change\\n\")), mdx(\"p\", null, \"\\uBB38\\uBC95\\uC801\\uC73C\\uB85C \\uBB38\\uC81C\\uB294 \\uC5C6\\uC73C\\uB098 \\uBCC0\\uC218 test\\uC758 \\uAC12 'test'\\uC744 'change'\\uB85C \\uC7AC\\uD560\\uB2F9\\uD558\\uC5EC \\uB36E\\uC5B4\\uC4F4\\uB2E4.\"), mdx(\"h4\", null, \"let, const \\uD0A4\\uC6CC\\uB4DC\\uB294 \\uBE14\\uB85D \\uB808\\uBCA8 \\uC2A4\\uCF54\\uD504\\uB97C \\uB530\\uB978\\uB2E4.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\uBE14\\uB85D \\uB808\\uBCA8 \\uC2A4\\uCF54\\uD504(Block-level scope)\\n\\uBAA8\\uB4E0 \\uCF54\\uB4DC \\uBE14\\uB85D(\\uD568\\uC218, if \\uBB38, for \\uBB38, while \\uBB38, try/catch \\uBB38 \\uB4F1) \\uB0B4\\uC5D0\\uC11C \\uC120\\uC5B8\\uB41C \\uBCC0\\uC218\\uB294 \\uCF54\\uB4DC \\uBE14\\uB85D \\uB0B4\\uC5D0\\uC11C\\uB9CC \\uC720\\uD6A8\\uD558\\uBA70 \\uCF54\\uB4DC \\uBE14\\uB85D \\uC678\\uBD80\\uC5D0\\uC11C\\uB294 \\uCC38\\uC870\\uD560 \\uC218 \\uC5C6\\uB2E4. \\uC989, \\uCF54\\uB4DC \\uBE14\\uB85D \\uB0B4\\uBD80\\uC5D0\\uC11C \\uC120\\uC5B8\\uD55C \\uBCC0\\uC218\\uB294 \\uC9C0\\uC5ED \\uBCC0\\uC218\\uC774\\uB2E4\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"let test = 'test';\\n\\n{\\n  let test = 'new test';\\n  let number = 123;\\n}\\n\\nconsole.log(test); // test\\nconsole.log(number); // ReferenceError: number is not defined\\n\")), mdx(\"h3\", null, \"2. var \\uD0A4\\uC6CC\\uB4DC \\uC0DD\\uB7B5 \\uAC00\\uB2A5\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"var test = 123;\\nconsole.log(test); // 123\\n\\nnumber = 12345;\\nconsole.log(number); // 12345\\n\")), mdx(\"h3\", null, \"3. \\uC911\\uBCF5 \\uC120\\uC5B8 \\uAC00\\uB2A5\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"var test = 'test';\\nvar test = 'change';\\n\\nlet bar = 123;\\nlet bar = 456;  // Uncaught SyntaxError: Identifier 'bar' has already been declared\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"let \\uD0A4\\uC6CC\\uB4DC\\uB294 \\uC911\\uBCF5 \\uC120\\uC5B8\\uC744 \\uD588\\uC744 \\uACBD\\uC6B0 SyntaxError\\uAC00 \\uBC1C\\uC0DD\\uD55C\\uB2E4.\")), mdx(\"h3\", null, \"4. \\uBCC0\\uC218 \\uD638\\uC774\\uC2A4\\uD305(Hoisting) (\\uC911\\uC694)\"), mdx(\"p\", null, \"\\uB2E4\\uC74C\\uC744 \\uBCF4\\uC790.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"console.log(test); // Error: Uncaught ReferenceError: test is not defined\\nlet test = 123;\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB0B4\\uAC00 \\uC544\\uB294 \\uC0C1\\uC2DD\\uC73C\\uB85C\\uB294 \\uC774\\uAC8C \\uC815\\uC0C1\\uC774\\uACE0, \\uBCC4\\uB85C \\uD2B9\\uBCC4\\uD55C \\uAC8C \\uC5C6\\uC5B4\\uBCF4\\uC600\\uB2E4. \\uD558\\uC9C0\\uB9CC var\\uC744 \\uC0AC\\uC6A9\\uD558\\uBA74...\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"console.log(test); // undefined\\nvar test = 123;\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAC12 123\\uC774 \\uCD9C\\uB825\\uB418\\uC9C4 \\uC54A\\uC9C0\\uB9CC, \\uB180\\uB78D\\uAC8C\\uB3C4 \\uC624\\uB958\\uAC00 \\uB728\\uC9C0 \\uC54A\\uACE0 undefined\\uAC00 \\uB72C\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC790\\uBC14\\uC2A4\\uD06C\\uB9BD\\uD2B8\\uC5D0\\uC11C\\uB294 \\uBAA8\\uB4E0 \\uC120\\uC5B8(var, let, const, function, function\", \"*\", \", class)\\uC744 \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"\\uD638\\uC774\\uC2A4\\uD305\")), \"\\uD558\\uAE30 \\uB54C\\uBB38\\uC774\\uB2E4.\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\uD638\\uC774\\uC2A4\\uD305(Hoisting)\\uC774\\uB780?\\nvar \\uC120\\uC5B8\\uBB38\\uC774\\uB098 function \\uC120\\uC5B8\\uBB38 \\uB4F1\\uC744 \\uD574\\uB2F9 \\uC2A4\\uCF54\\uD504\\uC758 \\uC120\\uB450\\uB85C \\uC62E\\uAE34 \\uAC83\\uCC98\\uB7FC \\uB3D9\\uC791\\uD558\\uB294 \\uD2B9\\uC131\\uC744 \\uB9D0\\uD55C\\uB2E4.\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC774\\uB7F0 \\uAC78 \\uD558\\uB294\\uAD6C\\uB098! \\uADF8\\uB7F0\\uB370 var\\uB3C4 \\uD638\\uC774\\uC2A4\\uD305\\uD558\\uACE0 let\\uB3C4 \\uD638\\uC774\\uC2A4\\uD305\\uD558\\uB294\\uB370 \\uC65C let\\uC740 \\uCC38\\uC870 \\uC5D0\\uB7EC\\uAC00 \\uBC1C\\uC0DD\\uD560\\uAE4C?\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC774\\uB294 var\\uACFC let\\uC758 \\uD638\\uC774\\uC2A4\\uD305 \\uACFC\\uC815\\uC5D0\\uC11C \\uCC28\\uC774\\uAC00 \\uC788\\uAE30 \\uB54C\\uBB38\\uC774\\uB2E4.\")), mdx(\"h4\", null, \"\\uBCC0\\uC218 \\uC0DD\\uC131\\uACFC \\uD638\\uC774\\uC2A4\\uD305 \\uACFC\\uC815\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\uC120\\uC5B8 \\uB2E8\\uACC4(Declaration phase)\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uBCC0\\uC218\\uB97C \\uC2E4\\uD589 \\uCEE8\\uD14D\\uC2A4\\uD2B8\\uC758 \\uBCC0\\uC218 \\uAC1D\\uCCB4(Variable Object)\\uC5D0 \\uB4F1\\uB85D\\uD55C\\uB2E4. \\uC774 \\uBCC0\\uC218 \\uAC1D\\uCCB4\\uB294 \\uC2A4\\uCF54\\uD504\\uAC00 \\uCC38\\uC870\\uD558\\uB294 \\uB300\\uC0C1\\uC774 \\uB41C\\uB2E4.\")), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\uCD08\\uAE30\\uD654 \\uB2E8\\uACC4(Initialization phase)\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uBCC0\\uC218 \\uAC1D\\uCCB4(Variable Object)\\uC5D0 \\uB4F1\\uB85D\\uB41C \\uBCC0\\uC218\\uB97C \\uC704\\uD55C \\uACF5\\uAC04\\uC744 \\uBA54\\uBAA8\\uB9AC\\uC5D0 \\uD655\\uBCF4\\uD55C\\uB2E4. \\uC774 \\uB2E8\\uACC4\\uC5D0\\uC11C \\uBCC0\\uC218\\uB294 undefined\\uB85C \\uCD08\\uAE30\\uD654\\uB41C\\uB2E4.\")), mdx(\"ol\", {\n    \"start\": 3\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\uD560\\uB2F9 \\uB2E8\\uACC4(Assignment phase)\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"undefined\\uB85C \\uCD08\\uAE30\\uD654\\uB41C \\uBCC0\\uC218\\uC5D0 \\uC2E4\\uC81C \\uAC12\\uC744 \\uD560\\uB2F9\\uD55C\\uB2E4.\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"var \\uD0A4\\uC6CC\\uB4DC\\uB85C \\uC120\\uC5B8\\uB41C \\uBCC0\\uC218\\uB294 \\uC120\\uC5B8 \\uB2E8\\uACC4\\uC640 \\uCD08\\uAE30\\uD654 \\uB2E8\\uACC4\\uAC00 \\uD55C\\uBC88\\uC5D0 \\uC774\\uB8E8\\uC5B4\\uC9C4\\uB2E4.\\n\\uC989, \\uC120\\uC5B8\\uBB38(ex. test = 123;) \\uC774\\uC804\\uC5D0 \\uC811\\uADFC\\uD574\\uB3C4 \\uC2A4\\uCF54\\uD504\\uC5D0 \\uBCC0\\uC218(undefined)\\uAC00 \\uC874\\uC7AC\\uD558\\uAE30 \\uB54C\\uBB38\\uC5D0 \\uC5D0\\uB7EC\\uAC00 \\uBC1C\\uC0DD\\uD558\\uC9C0 \\uC54A\\uB294\\uB2E4.\\n\\uC774\\uD6C4 \\uBCC0\\uC218 \\uD560\\uB2F9\\uBB38\\uC5D0 \\uB3C4\\uB2EC\\uD558\\uBA74 \\uAC12\\uC774 \\uD560\\uB2F9\\uB41C\\uB2E4.\\n-> \\uC774\\uAC83\\uC744 \\uBCC0\\uC218 \\uD638\\uC774\\uC2A4\\uD305\\uC774\\uB77C\\uACE0 \\uD55C\\uB2E4.\")), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://images.velog.io/images/kasran1/post/7622205f-82c2-4809-8e02-7ffa5d2918db/image.png\",\n    \"alt\": null\n  })), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"let \\uD0A4\\uC6CC\\uB4DC\\uB85C \\uC120\\uC5B8\\uB41C \\uBCC0\\uC218\\uB294 \\uC120\\uC5B8 \\uB2E8\\uACC4\\uC640 \\uCD08\\uAE30\\uD654 \\uB2E8\\uACC4\\uAC00 \\uBD84\\uB9AC\\uB418\\uC5B4 \\uC9C4\\uD589\\uB41C\\uB2E4.\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uCD08\\uAE30\\uD654 \\uC774\\uC804\\uC5D0 \\uBCC0\\uC218\\uC5D0 \\uC811\\uADFC\\uD558\\uAC8C \\uB418\\uBA74 \\uCC38\\uC870 \\uC5D0\\uB7EC\\uAC00 \\uBC1C\\uC0DD\\uD558\\uAC8C \\uB418\\uB294 \\uAC83\\uC774\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC774\\uB294 \\uBCC0\\uC218\\uB97C \\uC704\\uD55C \\uBA54\\uBAA8\\uB9AC \\uACF5\\uAC04\\uC774 \\uD655\\uBCF4\\uB418\\uC9C0 \\uC54A\\uC558\\uB2E4\\uB294 \\uB73B\\uC774\\uB2E4.(= \\uCD08\\uAE30\\uD654\\uAC00 \\uB418\\uC9C0 \\uC54A\\uC558\\uB2E4.)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC2A4\\uCF54\\uD504\\uC758 \\uC2DC\\uC791 \\uC9C0\\uC810\\uBD80\\uD130 \\uCD08\\uAE30\\uD654 \\uC2DC\\uC791 \\uC9C0\\uC810\\uAE4C\\uC9C0\\uC758 \\uAD6C\\uAC04\\uC744 \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"\\uC77C\\uC2DC\\uC801 \\uC0AC\\uAC01\\uC9C0\\uB300(TDZ)\")), \"\\uB77C\\uACE0 \\uBD80\\uB978\\uB2E4.\")), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://images.velog.io/images/kasran1/post/b8dc6b06-2964-4cd7-900e-05cd4aa22078/image.png\",\n    \"alt\": null\n  })), mdx(\"p\", null, \"\\uADF8\\uB807\\uB2E4\\uBA74 ES6\\uC5D0\\uC11C(let, const)\\uB294 \\uD638\\uC774\\uC2A4\\uD305\\uC774 \\uBC1C\\uC0DD\\uD558\\uC9C0 \\uC54A\\uB294 \\uAC83\\uACFC \\uAC19\\uC9C0 \\uC54A\\uB098?\\n\\uB098\\uB3C4 \\uADF8\\uB7F0 \\uC904 \\uC54C\\uC558\\uC73C\\uB098 \\uB2E4\\uC74C \\uC608\\uC81C\\uB97C \\uBCF4\\uBA74 \\uADF8\\uB807\\uC9C0 \\uC54A\\uB2E4\\uB294 \\uAC83\\uC744 \\uC54C \\uC218 \\uC788\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"let foo = 1; // \\uC804\\uC5ED \\uBCC0\\uC218\\n\\n{\\n  console.log(foo); // ReferenceError: foo is not defined\\n  let foo = 2; // \\uC9C0\\uC5ED \\uBCC0\\uC218\\n}\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ES6\\uC758 let\\uC740 \\uBE14\\uB85D \\uB808\\uBCA8 \\uC2A4\\uCF54\\uD504\\uB97C \\uAC00\\uC9C0\\uAE30 \\uB54C\\uBB38\\uC5D0 \\uBE14\\uB85D \\uB0B4\\uC5D0\\uC11C \\uC120\\uC5B8\\uB41C foo\\uB294 \\uC9C0\\uC5ED \\uBCC0\\uC218\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC9C0\\uC5ED \\uBCC0\\uC218 foo\\uB294 \\uD574\\uB2F9 \\uBE14\\uB85D\\uC5D0\\uC11C \\uD638\\uC774\\uC2A4\\uD305\\uB418\\uACE0, \\uD574\\uB2F9 \\uC2A4\\uCF54\\uD504\\uC758 \\uC2DC\\uC791 \\uC9C0\\uC810\\uBD80\\uD130 \\uCD08\\uAE30\\uD654 \\uC2DC\\uC810\\uAE4C\\uC9C0 TDZ\\uC5D0 \\uBE60\\uC9C4\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB530\\uB77C\\uC11C \\uC804\\uC5ED \\uBCC0\\uC218 foo\\uAC00 \\uCD9C\\uB825\\uB418\\uC9C0 \\uC54A\\uACE0 \\uCC38\\uC870 \\uC5D0\\uB7EC\\uAC00 \\uBC1C\\uC0DD\\uD55C\\uB2E4.\")), mdx(\"h2\", null, \"\\uAE30\\uD0C0\"), mdx(\"h3\", null, \"1. \\uC804\\uC5ED \\uAC1D\\uCCB4(Global object)\\uC640 let\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\uC790\\uBC14\\uC2A4\\uD06C\\uB9BD\\uD2B8\\uC758 \\uC804\\uC5ED \\uAC1D\\uCCB4\\uB294 \\uC77C\\uBC18\\uC801\\uC73C\\uB85C \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\uBE0C\\uB77C\\uC6B0\\uC800 \\uCE21\\uC5D0\\uC11C\\uB294 window\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\uC11C\\uBC84 \\uCE21\\uC5D0\\uC11C\\uB294 process\\uC640 \\uAC19\\uC740 \\uC804\\uC5ED \\uAC1D\\uCCB4\"), \"\\uB97C \\uC758\\uBBF8\\uD55C\\uB2E4.\")), mdx(\"p\", null, \"\\uC554\\uBB35\\uC801\\uC73C\\uB85C \\uC0AC\\uC6A9\\uB418\\uC5B4 \\uC0DD\\uB7B5\\uB418\\uB294 \\uACBD\\uC6B0\\uAC00 \\uB9CE\\uB2E4\\uACE0 \\uC54C\\uACE0 \\uC788\\uB294\\uB370...\\n\\uD558\\uC5EC\\uD2BC var\\uC758 \\uACBD\\uC6B0 \\uB2E4\\uC74C\\uACFC \\uAC19\\uC740 \\uC804\\uC5ED \\uAC1D\\uCCB4\\uC758 \\uD504\\uB85C\\uD37C\\uD2F0\\uAC00 \\uB41C\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"var foo = 123; // \\uC804\\uC5ED \\uBCC0\\uC218\\nconsole.log(window.foo); // 123\\n\")), mdx(\"p\", null, \"\\uD558\\uC9C0\\uB9CC let\\uC740 \\uB2E4\\uB974\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"let foo = 123; // \\uC804\\uC5ED \\uBCC0\\uC218\\nconsole.log(window.foo); // undefined\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"let \\uC804\\uC5ED \\uBCC0\\uC218\\uB294 \\uBCF4\\uC774\\uC9C0 \\uC54A\\uB294 \\uAC1C\\uB150\\uC801\\uC778 \\uBE14\\uB85D \\uB0B4\\uC5D0 \\uC874\\uC7AC\\uD558\\uAE30 \\uB54C\\uBB38\\uC774\\uB2E4.\")), mdx(\"h3\", null, \"2. const\"), mdx(\"p\", null, \"const\\uB294 let\\uACFC \\uB300\\uBD80\\uBD84 \\uB3D9\\uC77C\\uD558\\uB098 \\uB2E4\\uC74C\\uACFC \\uAC19\\uC740 \\uCC28\\uC774\\uC810\\uC744 \\uAC00\\uC9C0\\uACE0 \\uC788\\uB2E4.\"), mdx(\"h4\", null, \"2.1 \\uC120\\uC5B8\\uACFC \\uCD08\\uAE30\\uD654\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"let\\uC740 \\uC7AC\\uD560\\uB2F9\\uC774 \\uAC00\\uB2A5\\uD558\\uB098 const\\uB294 \\uBD88\\uAC00\\uB2A5\\uD558\\uB2E4.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"const FOO = 123;\\nFOO = 456; // TypeError: Assignment to constant variable.\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB610\\uD55C const\\uB294 \\uC120\\uC5B8\\uACFC \\uB3D9\\uC2DC\\uC5D0 \\uAC12\\uC758 \\uD560\\uB2F9\\uC774 \\uC774\\uB8E8\\uC5B4\\uC838\\uC57C \\uD55C\\uB2E4.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"const FOO; // SyntaxError: Missing initializer in const declaration\\n\")), mdx(\"h4\", null, \"2.2 \\uC0C1\\uC218\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uBCF4\\uD1B5 \\uC0C1\\uC218\\uC5D0 \\uB9CE\\uC774 \\uC0AC\\uC6A9\\uD55C\\uB2E4.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"// \\uAC12\\uC758 \\uC758\\uBBF8\\uB97C \\uBA85\\uD655\\uD788 \\uAE30\\uC220\\uD558\\uC5EC \\uAC00\\uB3C5\\uC131\\uC774 \\uD5A5\\uC0C1\\uB418\\uC5C8\\uB2E4.\\nconst MAXROWS = 10;\\nif (rows > MAXROWS) {}\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB124\\uC774\\uBC0D\\uC774 \\uC801\\uC808\\uD55C \\uC0C1\\uC218\\uB85C \\uC120\\uC5B8\\uD558\\uBA74 \\uAC00\\uB3C5\\uC131\\uACFC \\uC720\\uC9C0\\uBCF4\\uC218\\uC131\\uC774 \\uB300\\uD3ED \\uD5A5\\uC0C1\\uB41C\\uB2E4.\")), mdx(\"h4\", null, \"2.3 const\\uC640 \\uAC1D\\uCCB4\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"const\\uB294 \\uC7AC\\uD560\\uB2F9\\uC774 \\uAE08\\uC9C0\\uB418\\uC5B4 \\uC788\\uC9C0\\uB9CC, \\uAC1D\\uCCB4\\uC758 \\uD504\\uB85C\\uD37C\\uD2F0\\uB294 \\uBCF4\\uD638\\uD558\\uC9C0 \\uC54A\\uB294\\uB2E4. \\uC774\\uB294 \\uAC1D\\uCCB4\\uC5D0 \\uB300\\uD55C \\uCC38\\uC870\\uB97C \\uBCC0\\uACBD\\uD558\\uC9C0\\uB294 \\uBABB\\uD558\\uC9C0\\uB9CC, \\uAC1D\\uCCB4\\uC758 \\uB0B4\\uC6A9\\uC740 \\uBCC0\\uACBD\\uD560 \\uC218 \\uC788\\uB2E4\\uB294 \\uB73B\\uC774\\uB2E4.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"const user = { name: 'Lee' };\\n\\n// const \\uBCC0\\uC218\\uB294 \\uC7AC\\uD560\\uB2F9\\uC774 \\uAE08\\uC9C0\\uB41C\\uB2E4.\\n// user = {}; // TypeError: Assignment to constant variable.\\n\\n// \\uAC1D\\uCCB4\\uC758 \\uB0B4\\uC6A9\\uC740 \\uBCC0\\uACBD\\uD560 \\uC218 \\uC788\\uB2E4.\\nuser.name = 'Kim';\\n\\nconsole.log(user); // { name: 'Kim' }\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uBC30\\uC5F4 \\uD615\\uD0DC\\uC758 \\uAC1D\\uCCB4\\uB3C4 \\uB611\\uAC19\\uB2E4.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"const test = [1];\\nconsole.log(test); // [ 1 ]\\ntest.push(2);\\nconsole.log(test); // [ 1, 2 ]\\n\")), mdx(\"h2\", null, \"var vs. let vs. const\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ES6\\uB97C \\uC0AC\\uC6A9\\uD55C\\uB2E4\\uBA74 var\\uC740 \\uC4F0\\uC9C0 \\uC54A\\uB294\\uB2E4.\\n\\uB098\\uB3C4 JavaScript\\uB97C \\uBC30\\uC6B8 \\uB54C\\uBD80\\uD130 ES6\\uB97C \\uC0AC\\uC6A9\\uD574\\uC11C var\\uC744 \\uC368\\uBCF8 \\uC801\\uC774 \\uC5C6\\uB2E4. \\uC4F8 \\uC77C\\uC774 \\uC5C6\\uC5C8\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC7AC\\uD560\\uB2F9\\uC774 \\uD544\\uC694\\uD55C \\uACBD\\uC6B0 let\\uC744 \\uC0AC\\uC6A9\\n\\uAC12 \\uBCC0\\uACBD\\uC774 \\uD544\\uC694\\uD55C \\uC218\\uD559\\uC801 \\uC5F0\\uC0B0\\uC774\\uB098 \\uC9C0\\uC18D\\uC801\\uC73C\\uB85C \\uC0C1\\uD0DC \\uAC12\\uC774 \\uBCC0\\uACBD\\uB418\\uB294 \\uACBD\\uC6B0 \\uB4F1\\uC5D0 let\\uC744 \\uC0AC\\uC6A9\\uD55C\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"const\\uB97C \\uC0AC\\uC6A9\\uD558\\uC5EC \\uC548\\uC804\\uD558\\uAC8C \\uBCC0\\uC218\\uB97C \\uAD00\\uB9AC\\uD558\\uC790.\\n\\uC7AC\\uD560\\uB2F9\\uC774 \\uBD88\\uAC00\\uB2A5\\uD558\\uB2E4\\uB294 \\uAC78 \\uC774\\uC6A9\\uD574\\uC11C \\uC548\\uC804\\uC131\\uC744 \\uB192\\uC774\\uB294 \\uAC83\\uB3C4 \\uC88B\\uC740\\uB370,\\n\\uD300\\uC73C\\uB85C \\uD504\\uB85C\\uC81D\\uD2B8\\uB97C \\uC9C4\\uD589\\uD560 \\uB54C \\uBCF4\\uB2C8 \", mdx(\"em\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"em\"\n  }, \"\\uC0C1\\uC218\\uB97C \\uC774\\uC6A9\\uD558\\uB294 \\uAC8C \\uD611\\uC5C5\\uD560 \\uB54C \\uB9CE\\uC774 \\uC88B\\uB354\\uB77C.\")), \" \\uB098\\uB9CC \\uC544\\uB294 \\uC22B\\uC790, \\uBB38\\uC790\\uBCF4\\uB2E4\\uB294 \\uD6E8\\uC52C...\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"description":"JavaScript에서 변수를 선언하는 세 가지 방식 var, let, const에 대해 공부하고 정리한 것","title":"JavaScript에서 변수를 선언하는 세 가지 방식","date":"2021년 02월 10일","tag":["Javascript"]},"internal":{"content":"---\r\ndescription: \"JavaScript에서 변수를 선언하는 세 가지 방식 var, let, const에 대해 공부하고 정리한 것\"\r\ntitle: \"JavaScript에서 변수를 선언하는 세 가지 방식\"\r\ntag: [\"Javascript\"]\r\ndate: \"2021-02-10\"\r\nsummary: \"JavaScript에서 변수를 선언하는 세 가지 방식 var, let, const에 대해 공부하고 정리해보자\"\r\n---\r\n\r\n# JavaScript에서 변수를 선언하는 세 가지 방식\r\n\r\n> https://poiemaweb.com/es6-block-scope 을 토대로 공부한 내용을 정리한 것입니다.\r\n\r\n> 키워드 : 스코프, 호이스팅, TDZ\r\n\r\n## var? let? const?\r\n\r\nvar 키워드는 ES5까지 사용하던 방법이다.\r\n4가지 특징을 가지고 있으며, 심각한 문제를 일으킬 수 있다.\r\n\r\n- 보통 전역 스코프에서 발생하는 문제인데, ES6에서는 var의 문제를 해결하기 위해 **let과 const**를 도입했다.\r\n\r\n### 1. 함수 레벨 스코프 (중요)\r\n\r\n#### var 키워드는 함수 레벨 스코프를 따른다.\r\n\r\n> 함수 레벨 스코프(Function-level scope)\r\n> 함수 내에서 선언된 변수는 함수 내에서만 유효하며 함수 외부에서는 참조할 수 없다. 즉, 함수 내부에서 선언한 변수는 지역 변수이며 함수 외부에서 선언한 변수는 모두 전역 변수이다.\r\n\r\n```\r\nvar test = 'test'; // 전역 변수\r\nconsole.log(test); // test\r\n\r\n{\r\n  var test = 'change'; // 전역 변수\r\n}\r\nconsole.log(test); // change\r\n```\r\n\r\n문법적으로 문제는 없으나 변수 test의 값 'test'을 'change'로 재할당하여 덮어쓴다.\r\n\r\n#### let, const 키워드는 블록 레벨 스코프를 따른다.\r\n\r\n> 블록 레벨 스코프(Block-level scope)\r\n> 모든 코드 블록(함수, if 문, for 문, while 문, try/catch 문 등) 내에서 선언된 변수는 코드 블록 내에서만 유효하며 코드 블록 외부에서는 참조할 수 없다. 즉, 코드 블록 내부에서 선언한 변수는 지역 변수이다\r\n\r\n```\r\nlet test = 'test';\r\n\r\n{\r\n  let test = 'new test';\r\n  let number = 123;\r\n}\r\n\r\nconsole.log(test); // test\r\nconsole.log(number); // ReferenceError: number is not defined\r\n```\r\n\r\n### 2. var 키워드 생략 가능\r\n\r\n```\r\nvar test = 123;\r\nconsole.log(test); // 123\r\n\r\nnumber = 12345;\r\nconsole.log(number); // 12345\r\n```\r\n\r\n### 3. 중복 선언 가능\r\n\r\n```\r\nvar test = 'test';\r\nvar test = 'change';\r\n\r\nlet bar = 123;\r\nlet bar = 456;  // Uncaught SyntaxError: Identifier 'bar' has already been declared\r\n```\r\n\r\n- let 키워드는 중복 선언을 했을 경우 SyntaxError가 발생한다.\r\n\r\n### 4. 변수 호이스팅(Hoisting) (중요)\r\n\r\n다음을 보자.\r\n\r\n```\r\nconsole.log(test); // Error: Uncaught ReferenceError: test is not defined\r\nlet test = 123;\r\n```\r\n\r\n- 내가 아는 상식으로는 이게 정상이고, 별로 특별한 게 없어보였다. 하지만 var을 사용하면...\r\n\r\n```\r\nconsole.log(test); // undefined\r\nvar test = 123;\r\n```\r\n\r\n- 값 123이 출력되진 않지만, 놀랍게도 오류가 뜨지 않고 undefined가 뜬다.\r\n- 자바스크립트에서는 모든 선언(var, let, const, function, function\\*, class)을 ***호이스팅***하기 때문이다.\r\n\r\n> 호이스팅(Hoisting)이란?\r\n> var 선언문이나 function 선언문 등을 해당 스코프의 선두로 옮긴 것처럼 동작하는 특성을 말한다.\r\n\r\n- 이런 걸 하는구나! 그런데 var도 호이스팅하고 let도 호이스팅하는데 왜 let은 참조 에러가 발생할까?\r\n- 이는 var과 let의 호이스팅 과정에서 차이가 있기 때문이다.\r\n\r\n#### 변수 생성과 호이스팅 과정\r\n\r\n1. 선언 단계(Declaration phase)\r\n\r\n- 변수를 실행 컨텍스트의 변수 객체(Variable Object)에 등록한다. 이 변수 객체는 스코프가 참조하는 대상이 된다.\r\n\r\n2. 초기화 단계(Initialization phase)\r\n\r\n- 변수 객체(Variable Object)에 등록된 변수를 위한 공간을 메모리에 확보한다. 이 단계에서 변수는 undefined로 초기화된다.\r\n\r\n3. 할당 단계(Assignment phase)\r\n\r\n- undefined로 초기화된 변수에 실제 값을 할당한다.\r\n\r\n> var 키워드로 선언된 변수는 선언 단계와 초기화 단계가 한번에 이루어진다.\r\n> 즉, 선언문(ex. test = 123;) 이전에 접근해도 스코프에 변수(undefined)가 존재하기 때문에 에러가 발생하지 않는다.\r\n> 이후 변수 할당문에 도달하면 값이 할당된다.\r\n> -> 이것을 변수 호이스팅이라고 한다.\r\n\r\n![](https://images.velog.io/images/kasran1/post/7622205f-82c2-4809-8e02-7ffa5d2918db/image.png)\r\n\r\n> let 키워드로 선언된 변수는 선언 단계와 초기화 단계가 분리되어 진행된다.\r\n\r\n- 초기화 이전에 변수에 접근하게 되면 참조 에러가 발생하게 되는 것이다.\r\n- 이는 변수를 위한 메모리 공간이 확보되지 않았다는 뜻이다.(= 초기화가 되지 않았다.)\r\n- 스코프의 시작 지점부터 초기화 시작 지점까지의 구간을 **_일시적 사각지대(TDZ)_**라고 부른다.\r\n\r\n![](https://images.velog.io/images/kasran1/post/b8dc6b06-2964-4cd7-900e-05cd4aa22078/image.png)\r\n\r\n그렇다면 ES6에서(let, const)는 호이스팅이 발생하지 않는 것과 같지 않나?\r\n나도 그런 줄 알았으나 다음 예제를 보면 그렇지 않다는 것을 알 수 있다.\r\n\r\n```\r\nlet foo = 1; // 전역 변수\r\n\r\n{\r\n  console.log(foo); // ReferenceError: foo is not defined\r\n  let foo = 2; // 지역 변수\r\n}\r\n```\r\n\r\n- ES6의 let은 블록 레벨 스코프를 가지기 때문에 블록 내에서 선언된 foo는 지역 변수다.\r\n- 지역 변수 foo는 해당 블록에서 호이스팅되고, 해당 스코프의 시작 지점부터 초기화 시점까지 TDZ에 빠진다.\r\n- 따라서 전역 변수 foo가 출력되지 않고 참조 에러가 발생한다.\r\n\r\n## 기타\r\n\r\n### 1. 전역 객체(Global object)와 let\r\n\r\n> 자바스크립트의 전역 객체는 일반적으로 **브라우저 측에서는 window**, **서버 측에서는 process와 같은 전역 객체**를 의미한다.\r\n\r\n암묵적으로 사용되어 생략되는 경우가 많다고 알고 있는데...\r\n하여튼 var의 경우 다음과 같은 전역 객체의 프로퍼티가 된다.\r\n\r\n```\r\nvar foo = 123; // 전역 변수\r\nconsole.log(window.foo); // 123\r\n```\r\n\r\n하지만 let은 다르다.\r\n\r\n```\r\nlet foo = 123; // 전역 변수\r\nconsole.log(window.foo); // undefined\r\n```\r\n\r\n- let 전역 변수는 보이지 않는 개념적인 블록 내에 존재하기 때문이다.\r\n\r\n### 2. const\r\n\r\nconst는 let과 대부분 동일하나 다음과 같은 차이점을 가지고 있다.\r\n\r\n#### 2.1 선언과 초기화\r\n\r\n- let은 재할당이 가능하나 const는 불가능하다.\r\n\r\n```\r\nconst FOO = 123;\r\nFOO = 456; // TypeError: Assignment to constant variable.\r\n```\r\n\r\n- 또한 const는 선언과 동시에 값의 할당이 이루어져야 한다.\r\n\r\n```\r\nconst FOO; // SyntaxError: Missing initializer in const declaration\r\n```\r\n\r\n#### 2.2 상수\r\n\r\n- 보통 상수에 많이 사용한다.\r\n\r\n```\r\n// 값의 의미를 명확히 기술하여 가독성이 향상되었다.\r\nconst MAXROWS = 10;\r\nif (rows > MAXROWS) {}\r\n```\r\n\r\n- 네이밍이 적절한 상수로 선언하면 가독성과 유지보수성이 대폭 향상된다.\r\n\r\n#### 2.3 const와 객체\r\n\r\n- const는 재할당이 금지되어 있지만, 객체의 프로퍼티는 보호하지 않는다. 이는 객체에 대한 참조를 변경하지는 못하지만, 객체의 내용은 변경할 수 있다는 뜻이다.\r\n\r\n```\r\nconst user = { name: 'Lee' };\r\n\r\n// const 변수는 재할당이 금지된다.\r\n// user = {}; // TypeError: Assignment to constant variable.\r\n\r\n// 객체의 내용은 변경할 수 있다.\r\nuser.name = 'Kim';\r\n\r\nconsole.log(user); // { name: 'Kim' }\r\n```\r\n\r\n- 배열 형태의 객체도 똑같다.\r\n\r\n```\r\nconst test = [1];\r\nconsole.log(test); // [ 1 ]\r\ntest.push(2);\r\nconsole.log(test); // [ 1, 2 ]\r\n```\r\n\r\n## var vs. let vs. const\r\n\r\n- ES6를 사용한다면 var은 쓰지 않는다.\r\n  나도 JavaScript를 배울 때부터 ES6를 사용해서 var을 써본 적이 없다. 쓸 일이 없었다.\r\n- 재할당이 필요한 경우 let을 사용\r\n  값 변경이 필요한 수학적 연산이나 지속적으로 상태 값이 변경되는 경우 등에 let을 사용한다.\r\n- const를 사용하여 안전하게 변수를 관리하자.\r\n  재할당이 불가능하다는 걸 이용해서 안전성을 높이는 것도 좋은데,\r\n  팀으로 프로젝트를 진행할 때 보니 _**상수를 이용하는 게 협업할 때 많이 좋더라.**_ 나만 아는 숫자, 문자보다는 훨씬...\r\n"}}},"pageContext":{"id":"160daa73-e202-5525-9e29-a7348d41a5af","slug":"var-let-const","__params":{"slug":"var-let-const"}}},
    "staticQueryHashes": ["2841612589","3433077949","3494247862"]}