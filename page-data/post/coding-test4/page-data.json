{
    "componentChunkName": "component---src-pages-post-mdx-slug-js",
    "path": "/post/coding-test4/",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"description\": \"위클리 챌린지, [프로그래머스] 상호 평가\",\n  \"title\": \"[프로그래머스] 상호 평가\",\n  \"tag\": [\"코딩테스트\"],\n  \"date\": \"2021-08-17\",\n  \"summary\": \"\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\uC704\\uD074\\uB9AC \\uCC4C\\uB9B0\\uC9C0 3\\uC8FC\\uCC28 \\uBB38\\uC81C\")), mdx(\"h2\", null, \"\\uBB38\\uC81C \\uC124\\uBA85\"), mdx(\"p\", null, \"\\uD14C\\uC774\\uBE14 \\uC704\\uC5D0 \\uB193\\uC778 \\uD37C\\uC990 \\uC870\\uAC01\\uC744 \\uAC8C\\uC784 \\uBCF4\\uB4DC\\uC758 \\uBE48 \\uACF5\\uAC04\\uC5D0 \\uC801\\uC808\\uD788 \\uC62C\\uB824\\uB193\\uC73C\\uB824 \\uD569\\uB2C8\\uB2E4. \\uAC8C\\uC784 \\uBCF4\\uB4DC\\uC640 \\uD14C\\uC774\\uBE14\\uC740 \\uBAA8\\uB450 \\uAC01 \\uCE78\\uC774 1x1 \\uD06C\\uAE30\\uC778 \\uC815\\uC0AC\\uAC01 \\uACA9\\uC790 \\uBAA8\\uC591\\uC785\\uB2C8\\uB2E4. \\uC774\\uB54C, \\uB2E4\\uC74C \\uADDC\\uCE59\\uC5D0 \\uB530\\uB77C \\uD14C\\uC774\\uBE14 \\uC704\\uC5D0 \\uB193\\uC778 \\uD37C\\uC990 \\uC870\\uAC01\\uC744 \\uAC8C\\uC784 \\uBCF4\\uB4DC\\uC758 \\uBE48\\uCE78\\uC5D0 \\uCC44\\uC6B0\\uBA74 \\uB429\\uB2C8\\uB2E4.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC870\\uAC01\\uC740 \\uD55C \\uBC88\\uC5D0 \\uD558\\uB098\\uC529 \\uCC44\\uC6CC \\uB123\\uC2B5\\uB2C8\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC870\\uAC01\\uC744 \\uD68C\\uC804\\uC2DC\\uD0AC \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC870\\uAC01\\uC744 \\uB4A4\\uC9D1\\uC744 \\uC218\\uB294 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAC8C\\uC784 \\uBCF4\\uB4DC\\uC5D0 \\uC0C8\\uB85C \\uCC44\\uC6CC \\uB123\\uC740 \\uD37C\\uC990 \\uC870\\uAC01\\uACFC \\uC778\\uC811\\uD55C \\uCE78\\uC774 \\uBE44\\uC5B4\\uC788\\uC73C\\uBA74 \\uC548 \\uB429\\uB2C8\\uB2E4.\")), mdx(\"p\", null, \"\\uB2E4\\uC74C\\uC740 \\uD37C\\uC990 \\uC870\\uAC01\\uC744 \\uCC44\\uC6B0\\uB294 \\uC608\\uC2DC\\uC785\\uB2C8\\uB2E4.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/ab4d8aa2-f282-4764-bb46-84d405464b90/puzzle_5.png\",\n    \"alt\": null\n  })), mdx(\"p\", null, \"\\uC704 \\uADF8\\uB9BC\\uC5D0\\uC11C \\uC67C\\uCABD\\uC740 \\uD604\\uC7AC \\uAC8C\\uC784 \\uBCF4\\uB4DC\\uC758 \\uC0C1\\uD0DC\\uB97C, \\uC624\\uB978\\uCABD\\uC740 \\uD14C\\uC774\\uBE14 \\uC704\\uC5D0 \\uB193\\uC778 \\uD37C\\uC990 \\uC870\\uAC01\\uB4E4\\uC744 \\uB098\\uD0C0\\uB0C5\\uB2C8\\uB2E4. \\uD14C\\uC774\\uBE14 \\uC704\\uC5D0 \\uB193\\uC778 \\uD37C\\uC990 \\uC870\\uAC01\\uB4E4 \\uB610\\uD55C \\uB9C8\\uCC2C\\uAC00\\uC9C0\\uB85C \", \"[\\uC0C1,\\uD558,\\uC88C,\\uC6B0]\", \"\\uB85C \\uC778\\uC811\\uD574 \\uBD99\\uC5B4\\uC788\\uB294 \\uACBD\\uC6B0\\uB294 \\uC5C6\\uC73C\\uBA70, \\uD770 \\uCE78\\uC740 \\uD37C\\uC990\\uC774 \\uB193\\uC774\\uC9C0 \\uC54A\\uC740 \\uBE48 \\uACF5\\uAC04\\uC744 \\uB098\\uD0C0\\uB0C5\\uB2C8\\uB2E4. \\uBAA8\\uB4E0 \\uD37C\\uC990 \\uC870\\uAC01\\uC740 \\uACA9\\uC790 \\uCE78\\uC5D0 \\uB531 \\uB9DE\\uAC8C \\uB193\\uC5EC\\uC788\\uC73C\\uBA70, \\uACA9\\uC790 \\uCE78\\uC744 \\uBC97\\uC5B4\\uB098\\uAC70\\uB098, \\uAC78\\uCCD0 \\uC788\\uB294 \\uB4F1 \\uC798\\uBABB \\uB193\\uC778 \\uACBD\\uC6B0\\uB294 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"), mdx(\"p\", null, \"\\uC774\\uB54C, \\uC544\\uB798 \\uADF8\\uB9BC\\uACFC \\uAC19\\uC774 3,4,5\\uBC88 \\uC870\\uAC01\\uC744 \\uACA9\\uC790 \\uCE78\\uC5D0 \\uB193\\uC73C\\uBA74 \\uADDC\\uCE59\\uC5D0 \\uC5B4\\uAE0B\\uB098\\uBBC0\\uB85C \\uBD88\\uAC00\\uB2A5\\uD55C \\uACBD\\uC6B0\\uC785\\uB2C8\\uB2E4.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/70e371ad-4306-412b-b53b-25208e52a513/puzzle_6.png\",\n    \"alt\": null\n  })), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"3\\uBC88 \\uC870\\uAC01\\uC744 \\uB193\\uACE0 4\\uBC88 \\uC870\\uAC01\\uC744 \\uB193\\uAE30 \\uC804\\uC5D0 \\uC704\\uCABD\\uC73C\\uB85C \\uC778\\uC811\\uD55C \\uCE78\\uC5D0 \\uBE48\\uCE78\\uC774 \\uC0DD\\uAE41\\uB2C8\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"5\\uBC88 \\uC870\\uAC01\\uC758 \\uC591 \\uC606\\uC73C\\uB85C \\uC778\\uC811\\uD55C \\uCE78\\uC5D0 \\uBE48\\uCE78\\uC774 \\uC0DD\\uAE41\\uB2C8\\uB2E4.\")), mdx(\"p\", null, \"\\uB2E4\\uC74C\\uC740 \\uADDC\\uCE59\\uC5D0 \\uB9DE\\uAC8C \\uCD5C\\uB300\\uD55C \\uB9CE\\uC740 \\uC870\\uAC01\\uC744 \\uAC8C\\uC784 \\uBCF4\\uB4DC\\uC5D0 \\uCC44\\uC6CC \\uB123\\uC740 \\uBAA8\\uC2B5\\uC785\\uB2C8\\uB2E4.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/dadd0bc1-8e38-4689-a480-26afa799a5a3/puzzle_7.png\",\n    \"alt\": null\n  })), mdx(\"p\", null, \"\\uCD5C\\uB300\\uD55C \\uB9CE\\uC740 \\uC870\\uAC01\\uC744 \\uCC44\\uC6CC \\uB123\\uC73C\\uBA74 \\uCD1D 14\\uCE78\\uC744 \\uCC44\\uC6B8 \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4.\"), mdx(\"p\", null, \"\\uD604\\uC7AC \\uAC8C\\uC784 \\uBCF4\\uB4DC\\uC758 \\uC0C1\\uD0DC \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"game_board\"), \", \\uD14C\\uC774\\uBE14 \\uC704\\uC5D0 \\uB193\\uC778 \\uD37C\\uC990 \\uC870\\uAC01\\uC758 \\uC0C1\\uD0DC \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"table\"), \"\\uC774 \\uB9E4\\uAC1C\\uBCC0\\uC218\\uB85C \\uC8FC\\uC5B4\\uC9D1\\uB2C8\\uB2E4. \\uADDC\\uCE59\\uC5D0 \\uB9DE\\uAC8C \\uCD5C\\uB300\\uD55C \\uB9CE\\uC740 \\uD37C\\uC990 \\uC870\\uAC01\\uC744 \\uCC44\\uC6CC \\uB123\\uC744 \\uACBD\\uC6B0, \\uCD1D \\uBA87 \\uCE78\\uC744 \\uCC44\\uC6B8 \\uC218 \\uC788\\uB294\\uC9C0 return \\uD558\\uB3C4\\uB85D solution \\uD568\\uC218\\uB97C \\uC644\\uC131\\uD574\\uC8FC\\uC138\\uC694.\"), mdx(\"h2\", null, \"\\uC81C\\uD55C\\uC0AC\\uD56D\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"3 \\u2264 game_board\\uC758 \\uD589 \\uAE38\\uC774 \\u2264 50\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"game_board\\uC758 \\uAC01 \\uC5F4 \\uAE38\\uC774 = game_board\\uC758 \\uD589 \\uAE38\\uC774\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC989, \\uAC8C\\uC784 \\uBCF4\\uB4DC\\uB294 \\uC815\\uC0AC\\uAC01 \\uACA9\\uC790 \\uBAA8\\uC591\\uC785\\uB2C8\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"game_board\\uC758 \\uBAA8\\uB4E0 \\uC6D0\\uC18C\\uB294 0 \\uB610\\uB294 1\\uC785\\uB2C8\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"0\\uC740 \\uBE48\\uCE78, 1\\uC740 \\uC774\\uBBF8 \\uCC44\\uC6CC\\uC9C4 \\uCE78\\uC744 \\uB098\\uD0C0\\uB0C5\\uB2C8\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD37C\\uC990 \\uC870\\uAC01\\uC774 \\uB193\\uC77C \\uBE48\\uCE78\\uC740 1 x 1 \\uD06C\\uAE30 \\uC815\\uC0AC\\uAC01\\uD615\\uC774 \\uCD5C\\uC18C 1\\uAC1C\\uC5D0\\uC11C \\uCD5C\\uB300 6\\uAC1C\\uAE4C\\uC9C0 \\uC5F0\\uACB0\\uB41C \\uD615\\uD0DC\\uB85C\\uB9CC \\uC8FC\\uC5B4\\uC9D1\\uB2C8\\uB2E4.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"table\\uC758 \\uD589 \\uAE38\\uC774 = game_board\\uC758 \\uD589 \\uAE38\\uC774\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"table\\uC758 \\uAC01 \\uC5F4 \\uAE38\\uC774 = table\\uC758 \\uD589 \\uAE38\\uC774\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC989, \\uD14C\\uC774\\uBE14\\uC740 game_board\\uC640 \\uAC19\\uC740 \\uD06C\\uAE30\\uC758 \\uC815\\uC0AC\\uAC01 \\uACA9\\uC790 \\uBAA8\\uC591\\uC785\\uB2C8\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"table\\uC758 \\uBAA8\\uB4E0 \\uC6D0\\uC18C\\uB294 0 \\uB610\\uB294 1\\uC785\\uB2C8\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"0\\uC740 \\uBE48\\uCE78, 1\\uC740 \\uC870\\uAC01\\uC774 \\uB193\\uC778 \\uCE78\\uC744 \\uB098\\uD0C0\\uB0C5\\uB2C8\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD37C\\uC990 \\uC870\\uAC01\\uC740 1 x 1 \\uD06C\\uAE30 \\uC815\\uC0AC\\uAC01\\uD615\\uC774 \\uCD5C\\uC18C 1\\uAC1C\\uC5D0\\uC11C \\uCD5C\\uB300 6\\uAC1C\\uAE4C\\uC9C0 \\uC5F0\\uACB0\\uB41C \\uD615\\uD0DC\\uB85C\\uB9CC \\uC8FC\\uC5B4\\uC9D1\\uB2C8\\uB2E4.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"game_board\\uC5D0\\uB294 \\uBC18\\uB4DC\\uC2DC \\uD558\\uB098 \\uC774\\uC0C1\\uC758 \\uBE48\\uCE78\\uC774 \\uC788\\uC2B5\\uB2C8\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"table\\uC5D0\\uB294 \\uBC18\\uB4DC\\uC2DC \\uD558\\uB098 \\uC774\\uC0C1\\uC758 \\uBE14\\uB85D\\uC774 \\uB193\\uC5EC \\uC788\\uC2B5\\uB2C8\\uB2E4.\")), mdx(\"h2\", null, \"\\uC785\\uCD9C\\uB825 \\uC608\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"game_board\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"table\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"result\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"[\", \"[1,1,0,0,1,0]\", \",\", \"[0,0,1,0,1,0]\", \",\", \"[0,1,1,0,0,1]\", \",\", \"[1,1,0,1,1,1]\", \",\", \"[1,0,0,0,1,0]\", \",\", \"[0,1,1,1,0,0]\", \"]\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"[\", \"[1,0,0,1,1,0]\", \",\", \"[1,0,1,0,1,0]\", \",\", \"[0,1,1,0,1,1]\", \",\", \"[0,0,1,0,0,0]\", \",\", \"[1,1,0,1,1,0]\", \",\", \"[0,1,0,0,0,0]\", \"]\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"14\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"[\", \"[0,0,0]\", \",\", \"[1,1,0]\", \",\", \"[1,1,1]\", \"]\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"[\", \"[1,1,1]\", \",\", \"[1,0,0]\", \",\", \"[0,0,0]\", \"]\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"0\")))), mdx(\"h2\", null, \"\\uD480\\uC774\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\uAC04\\uB2E8\\uD558\\uAC8C \\uAC8C\\uC784 \\uBCF4\\uB4DC\\uC640 \\uD14C\\uC774\\uBE14\\uC5D0\\uC11C \\uD37C\\uC990 \\uC870\\uAC01\\uC5D0 \\uB300\\uD55C \\uB370\\uC774\\uD130\\uB97C \\uC5BB\\uACE0, \\uD37C\\uC990\\uC744 \\uD68C\\uC804\\uC2DC\\uD0A4\\uBA74\\uC11C \\uAC8C\\uC784 \\uBCF4\\uB4DC\\uC5D0 \\uB9DE\\uCDB0\\uBCF4\\uBA74\\uC11C \\uD558\\uB098\\uC529 \\uC18C\\uAC70\\uD558\\uB294 \\uBC29\\uC2DD\\uC73C\\uB85C \\uC9C4\\uD589\\uD558\\uBA74 \\uB41C\\uB2E4.\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Step 1. \\uAC8C\\uC784 \\uBCF4\\uB4DC\\uC640 \\uD14C\\uC774\\uBE14\\uC5D0\\uC11C \\uD37C\\uC990 \\uC870\\uAC01\\uC5D0 \\uB300\\uD55C \\uC815\\uBCF4\\uB97C \\uC5BB\\uB294\\uB2E4. (2\\uCC28\\uC6D0 \\uBC30\\uC5F4, \\uD37C\\uC990 \\uC870\\uAC01\\uC758 \\uB124\\uBAA8 \\uD558\\uB098\\uB9C8\\uB2E4 \\uC88C\\uD45C\\uB85C \\uD45C\\uD604\\uD558\\uACE0 \\uBE44\\uAD50\\uD558\\uAE30 \\uC27D\\uAC8C \\uC2DC\\uC791\\uC810\\uC73C\\uB85C\\uBD80\\uD130\\uC758 \\uAC70\\uB9AC\\uB85C \\uBCC0\\uD658\\uD55C\\uB2E4.)\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Step 2. \\uC81C\\uC77C \\uD070 \\uD37C\\uC990 \\uC870\\uAC01\\uBD80\\uD130 \\uAC8C\\uC784 \\uBCF4\\uB4DC\\uC5D0 \\uB9DE\\uCDB0\\uBCF8\\uB2E4. \\uBE48\\uCE78\\uC774 \\uC874\\uC7AC\\uD558\\uBA74 \\uC548 \\uB418\\uB2C8 \\uC815\\uD655\\uD788 \\uC77C\\uCE58\\uD574\\uC57C \\uD55C\\uB2E4.\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Step 3. \\uB9DE\\uB294 \\uD37C\\uC990\\uC740 \\uD14C\\uC774\\uBE14\\uC5D0\\uC11C \\uC9C0\\uC6B0\\uACE0, \\uD574\\uB2F9 \\uD37C\\uC990\\uC5D0 \\uB9DE\\uB294 \\uAC8C\\uC784 \\uBCF4\\uB4DC\\uC758 \\uBE48\\uCE78\\uB3C4 \\uC9C0\\uC6B4\\uB2E4.\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Step 4. \\uD14C\\uC774\\uBE14 \\uC790\\uCCB4\\uB97C 90\\uB3C4 \\uD68C\\uC804\\uC2DC\\uD0A4\\uACE0 Step 1~4\\uB97C \\uBC18\\uBCF5\\uD55C\\uB2E4. (\\uD37C\\uC990 \\uC870\\uAC01 \\uAC01\\uAC01\\uC744 \\uD68C\\uC804\\uC2DC\\uD0A4\\uB294 \\uAC83\\uBCF4\\uB2E4 \\uD14C\\uC774\\uBE14\\uC744 \\uD68C\\uC804\\uC2DC\\uD0A4\\uB294 \\uAC8C \\uAC04\\uB2E8\\uD560 \\uAC83 \\uAC19\\uC544\\uC11C)\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"function getPuzzles(origin, number) {\\n    // solution\\uC758 \\uC6D0\\uBCF8\\uC774 \\uC218\\uC815\\uB418\\uB294 \\uAC83\\uC744 \\uB9C9\\uAE30 \\uC704\\uD574 table\\uC744 \\uBCF5\\uC0AC\\uD55C\\uB2E4.\\n    const table = [];\\n    for (let i = 0; i < origin.length; i++) {\\n        const item = [];\\n        for (let j = 0; j < origin[i].length; j++) {\\n            item.push(origin[i][j]);\\n        }\\n\\n        table.push(item);\\n    }\\n\\n    const num = number === 0 ? 1 : 0;\\n    let arr = [];\\n    // DFS \\uBC29\\uC2DD\\uC73C\\uB85C \\uD37C\\uC990 \\uC870\\uAC01\\uC744 \\uC88C\\uD45C \\uD615\\uD0DC\\uB85C \\uAD6C\\uD55C\\uB2E4.\\n    const setPuzzle = (x, y) => {\\n        if (table[x][y] === number) {\\n            table[x][y] = num; // \\uD604\\uC7AC \\uC9C0\\uC810\\uC744 \\uC5C6\\uC560\\uACE0\\n            arr.push([x, y]); // \\uD604\\uC7AC \\uC88C\\uD45C\\uB97C \\uD37C\\uC990 \\uBC30\\uC5F4\\uC5D0 \\uB123\\uB294\\uB2E4.\\n\\n            if (y + 1 < table.length) setPuzzle(x, y + 1); // \\uB3D9\\n            if (y - 1 >= 0) setPuzzle(x, y - 1); // \\uC11C\\n            if (x + 1 < table.length) setPuzzle(x + 1, y); // \\uB0A8\\n            if (x - 1 >= 0) setPuzzle(x - 1, y); // \\uBD81\\n        }\\n    }\\n\\n    const result = [];\\n\\n    // \\uD14C\\uC774\\uBE14\\uC744 \\uC21C\\uD68C\\uD558\\uBA70 \\uD37C\\uC990 \\uC870\\uAC01\\uC744 \\uCC3E\\uB294\\uB2E4.\\n    for (let i = 0; i < table.length; i++) {\\n        for (let j = 0; j < table[i].length; j++) {\\n            if (table[i][j] === number) {\\n                setPuzzle(i, j);\\n                result.push(arr);\\n                arr = [];\\n            }\\n        }\\n    }\\n\\n    // \\uAC8C\\uC784 \\uBCF4\\uB4DC\\uC640 \\uD37C\\uC990 \\uC870\\uAC01\\uC744 \\uBE44\\uAD50\\uD558\\uAE30 \\uC27D\\uAC8C \\uC88C\\uD45C\\uAC00 \\uC544\\uB2CC \\uC2DC\\uC791\\uC810\\uACFC\\uC758 \\uAC70\\uB9AC\\uB85C \\uB098\\uD0C0\\uB0C4\\n    // \\uAC8C\\uC784 \\uBCF4\\uB4DC\\uC5D0 \\uD37C\\uC990 \\uC870\\uAC01\\uC744 \\uB9DE\\uCD9C \\uB54C \\uD3B8\\uD558\\uB3C4\\uB85D \\uD37C\\uC990 \\uD06C\\uAE30\\uB97C \\uB0B4\\uB9BC\\uCC28\\uC21C\\uC73C\\uB85C \\uC815\\uB82C\\n    return result.map(data => data.map((p, idx) => {\\n            return idx === 0 ? p : [data[0][0] - p[0], data[0][1] - p[1]];\\n        })).sort((a, b) => b.length - a.length);\\n}\\n\\n// \\uD14C\\uC774\\uBE14 \\uC790\\uCCB4\\uB97C \\uD68C\\uC804\\uC2DC\\uCF1C \\uC804\\uCCB4 \\uD37C\\uC990 \\uC870\\uAC01\\uC744 \\uD68C\\uC804\\uC2DC\\uD0A4\\uB294 \\uD6A8\\uACFC\\nfunction getRotatedTable(table) {\\n    const arr = new Array(table[0].length).fill(0).map(_ => []);\\n\\n    for (let i = table.length - 1; i >= 0; i--) {\\n        for (let j = 0; j < table[0].length; j++) {\\n            arr[j].push(table[i][j]);\\n        }\\n    }\\n\\n    return arr;\\n}\\n\\n// \\uAC8C\\uC784 \\uBCF4\\uB4DC\\uC5D0 \\uD37C\\uC990 \\uC870\\uAC01\\uC774 \\uB9DE\\uB294\\uAC00?\\nfunction isMatch(spot, puzzle) {\\n    for (let i = 1; i < spot.length; i++) {\\n        if (spot[i][0] !== puzzle[i][0] || spot[i][1] !== puzzle[i][1])\\n            return false;\\n    }\\n\\n    return true;\\n}\\n\\nfunction solution(gameBoard, table) {\\n    // isMatch\\uC5D0\\uC11C \\uC77C\\uCE58\\uD560 \\uACBD\\uC6B0 \\uD574\\uB2F9 \\uD37C\\uC990 \\uC870\\uAC01\\uC744 \\uD14C\\uC774\\uBE14\\uC5D0\\uC11C \\uC9C0\\uC6B4\\uB2E4.\\n    const removePuzzle = (puzzle) => {\\n        const originPuzzle = puzzle.map((data, idx) => {\\n            return idx === 0 ? data : [puzzle[0][0] - data[0], puzzle[0][1] - data[1]];\\n        });\\n\\n        originPuzzle.forEach(data => {\\n            table[data[0]][data[1]] = 0;\\n        })\\n    }\\n\\n    let answer = 0;\\n\\n    // \\uAC8C\\uC784 \\uBCF4\\uB4DC\\uC5D0\\uC11C \\uD37C\\uC990\\uC744 \\uB123\\uC744 \\uC218 \\uC788\\uB294 \\uBAA8\\uC591\\uB4E4 \\uD30C\\uC545\\n    const slots = getPuzzles(gameBoard, 0);\\n\\n    // 3\\uBC88 \\uD68C\\uC804\\uC2DC\\uCF1C\\uC11C \\uBCF4\\uB4DC\\uC5D0 \\uD37C\\uC990\\uC744 \\uB9DE\\uCD9C \\uC218 \\uC788\\uB294\\uC9C0 \\uD30C\\uC545\\n    for (let i = 0; i <= 3; i++) {\\n        if (i !== 0) table = getRotatedTable(table); // \\uD14C\\uC774\\uBE14 \\uD68C\\uC804\\n        const puzzles = getPuzzles(table, 1);\\n\\n        // slots vs. puzzles\\uB97C \\uBE44\\uAD50\\uD558\\uACE0\\n        puzzles.forEach(puzzle => {\\n            for (let j = 0; j < slots.length; j++) {\\n                if (slots[j].length < puzzle.length) break;\\n\\n                // \\uD37C\\uC990\\uC774 slots\\uC5D0 \\uB9DE\\uCDB0\\uC9C4\\uB2E4\\uBA74 \\uBCF4\\uB4DC\\uC640 \\uD14C\\uC774\\uBE14\\uC5D0\\uC11C \\uC9C0\\uC6B0\\uACE0 answer\\uC744 \\uC99D\\uAC00\\uC2DC\\uD0AC \\uAC83\\n                if (slots[j].length === puzzle.length && isMatch(slots[j], puzzle)) {\\n                    answer += puzzle.length;\\n                    removePuzzle(puzzle);\\n                    slots.splice(j, 1);\\n                    break;\\n                }\\n            }\\n        })\\n    }\\n\\n    return answer;\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"description":"위클리 챌린지, [프로그래머스] 상호 평가","title":"[프로그래머스] 상호 평가","date":"2021년 08월 17일","tag":["코딩테스트"]},"internal":{"content":"---\r\ndescription: \"위클리 챌린지, [프로그래머스] 상호 평가\"\r\ntitle: \"[프로그래머스] 상호 평가\"\r\ntag: [\"코딩테스트\"]\r\ndate: \"2021-08-17\"\r\nsummary: \"\"\r\n---\r\n\r\n> 위클리 챌린지 3주차 문제\r\n\r\n## 문제 설명\r\n\r\n테이블 위에 놓인 퍼즐 조각을 게임 보드의 빈 공간에 적절히 올려놓으려 합니다. 게임 보드와 테이블은 모두 각 칸이 1x1 크기인 정사각 격자 모양입니다. 이때, 다음 규칙에 따라 테이블 위에 놓인 퍼즐 조각을 게임 보드의 빈칸에 채우면 됩니다.\r\n\r\n- 조각은 한 번에 하나씩 채워 넣습니다.\r\n- 조각을 회전시킬 수 있습니다.\r\n- 조각을 뒤집을 수는 없습니다.\r\n- 게임 보드에 새로 채워 넣은 퍼즐 조각과 인접한 칸이 비어있으면 안 됩니다.\r\n\r\n다음은 퍼즐 조각을 채우는 예시입니다.\r\n\r\n![](https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/ab4d8aa2-f282-4764-bb46-84d405464b90/puzzle_5.png)\r\n\r\n위 그림에서 왼쪽은 현재 게임 보드의 상태를, 오른쪽은 테이블 위에 놓인 퍼즐 조각들을 나타냅니다. 테이블 위에 놓인 퍼즐 조각들 또한 마찬가지로 [상,하,좌,우]로 인접해 붙어있는 경우는 없으며, 흰 칸은 퍼즐이 놓이지 않은 빈 공간을 나타냅니다. 모든 퍼즐 조각은 격자 칸에 딱 맞게 놓여있으며, 격자 칸을 벗어나거나, 걸쳐 있는 등 잘못 놓인 경우는 없습니다.\r\n\r\n이때, 아래 그림과 같이 3,4,5번 조각을 격자 칸에 놓으면 규칙에 어긋나므로 불가능한 경우입니다.\r\n\r\n![](https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/70e371ad-4306-412b-b53b-25208e52a513/puzzle_6.png)\r\n\r\n- 3번 조각을 놓고 4번 조각을 놓기 전에 위쪽으로 인접한 칸에 빈칸이 생깁니다.\r\n- 5번 조각의 양 옆으로 인접한 칸에 빈칸이 생깁니다.\r\n\r\n다음은 규칙에 맞게 최대한 많은 조각을 게임 보드에 채워 넣은 모습입니다.\r\n\r\n![](https://grepp-programmers.s3.ap-northeast-2.amazonaws.com/files/production/dadd0bc1-8e38-4689-a480-26afa799a5a3/puzzle_7.png)\r\n\r\n최대한 많은 조각을 채워 넣으면 총 14칸을 채울 수 있습니다.\r\n\r\n현재 게임 보드의 상태 **game_board**, 테이블 위에 놓인 퍼즐 조각의 상태 **table**이 매개변수로 주어집니다. 규칙에 맞게 최대한 많은 퍼즐 조각을 채워 넣을 경우, 총 몇 칸을 채울 수 있는지 return 하도록 solution 함수를 완성해주세요.\r\n\r\n## 제한사항\r\n\r\n- 3 ≤ game_board의 행 길이 ≤ 50\r\n- game_board의 각 열 길이 = game_board의 행 길이\r\n  - 즉, 게임 보드는 정사각 격자 모양입니다.\r\n  - game_board의 모든 원소는 0 또는 1입니다.\r\n  - 0은 빈칸, 1은 이미 채워진 칸을 나타냅니다.\r\n  - 퍼즐 조각이 놓일 빈칸은 1 x 1 크기 정사각형이 최소 1개에서 최대 6개까지 연결된 형태로만 주어집니다.\r\n- table의 행 길이 = game_board의 행 길이\r\n- table의 각 열 길이 = table의 행 길이\r\n  - 즉, 테이블은 game_board와 같은 크기의 정사각 격자 모양입니다.\r\n  - table의 모든 원소는 0 또는 1입니다.\r\n  - 0은 빈칸, 1은 조각이 놓인 칸을 나타냅니다.\r\n  - 퍼즐 조각은 1 x 1 크기 정사각형이 최소 1개에서 최대 6개까지 연결된 형태로만 주어집니다.\r\n- game_board에는 반드시 하나 이상의 빈칸이 있습니다.\r\n- table에는 반드시 하나 이상의 블록이 놓여 있습니다.\r\n\r\n## 입출력 예\r\n\r\n| game_board                                                                            | table                                                                                 | result |\r\n| ------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------- | ------ |\r\n| [[1,1,0,0,1,0],[0,0,1,0,1,0],[0,1,1,0,0,1],[1,1,0,1,1,1],[1,0,0,0,1,0],[0,1,1,1,0,0]] | [[1,0,0,1,1,0],[1,0,1,0,1,0],[0,1,1,0,1,1],[0,0,1,0,0,0],[1,1,0,1,1,0],[0,1,0,0,0,0]] | 14     |\r\n| [[0,0,0],[1,1,0],[1,1,1]]                                                             | [[1,1,1],[1,0,0],[0,0,0]]                                                             | 0      |\r\n\r\n## 풀이\r\n\r\n> 간단하게 게임 보드와 테이블에서 퍼즐 조각에 대한 데이터를 얻고, 퍼즐을 회전시키면서 게임 보드에 맞춰보면서 하나씩 소거하는 방식으로 진행하면 된다.\r\n\r\n> Step 1. 게임 보드와 테이블에서 퍼즐 조각에 대한 정보를 얻는다. (2차원 배열, 퍼즐 조각의 네모 하나마다 좌표로 표현하고 비교하기 쉽게 시작점으로부터의 거리로 변환한다.)\r\n\r\n> Step 2. 제일 큰 퍼즐 조각부터 게임 보드에 맞춰본다. 빈칸이 존재하면 안 되니 정확히 일치해야 한다.\r\n\r\n> Step 3. 맞는 퍼즐은 테이블에서 지우고, 해당 퍼즐에 맞는 게임 보드의 빈칸도 지운다.\r\n\r\n> Step 4. 테이블 자체를 90도 회전시키고 Step 1~4를 반복한다. (퍼즐 조각 각각을 회전시키는 것보다 테이블을 회전시키는 게 간단할 것 같아서)\r\n\r\n```\r\nfunction getPuzzles(origin, number) {\r\n    // solution의 원본이 수정되는 것을 막기 위해 table을 복사한다.\r\n    const table = [];\r\n    for (let i = 0; i < origin.length; i++) {\r\n        const item = [];\r\n        for (let j = 0; j < origin[i].length; j++) {\r\n            item.push(origin[i][j]);\r\n        }\r\n\r\n        table.push(item);\r\n    }\r\n\r\n    const num = number === 0 ? 1 : 0;\r\n    let arr = [];\r\n    // DFS 방식으로 퍼즐 조각을 좌표 형태로 구한다.\r\n    const setPuzzle = (x, y) => {\r\n        if (table[x][y] === number) {\r\n            table[x][y] = num; // 현재 지점을 없애고\r\n            arr.push([x, y]); // 현재 좌표를 퍼즐 배열에 넣는다.\r\n\r\n            if (y + 1 < table.length) setPuzzle(x, y + 1); // 동\r\n            if (y - 1 >= 0) setPuzzle(x, y - 1); // 서\r\n            if (x + 1 < table.length) setPuzzle(x + 1, y); // 남\r\n            if (x - 1 >= 0) setPuzzle(x - 1, y); // 북\r\n        }\r\n    }\r\n\r\n    const result = [];\r\n\r\n    // 테이블을 순회하며 퍼즐 조각을 찾는다.\r\n    for (let i = 0; i < table.length; i++) {\r\n        for (let j = 0; j < table[i].length; j++) {\r\n            if (table[i][j] === number) {\r\n                setPuzzle(i, j);\r\n                result.push(arr);\r\n                arr = [];\r\n            }\r\n        }\r\n    }\r\n\r\n    // 게임 보드와 퍼즐 조각을 비교하기 쉽게 좌표가 아닌 시작점과의 거리로 나타냄\r\n    // 게임 보드에 퍼즐 조각을 맞출 때 편하도록 퍼즐 크기를 내림차순으로 정렬\r\n    return result.map(data => data.map((p, idx) => {\r\n            return idx === 0 ? p : [data[0][0] - p[0], data[0][1] - p[1]];\r\n        })).sort((a, b) => b.length - a.length);\r\n}\r\n\r\n// 테이블 자체를 회전시켜 전체 퍼즐 조각을 회전시키는 효과\r\nfunction getRotatedTable(table) {\r\n    const arr = new Array(table[0].length).fill(0).map(_ => []);\r\n\r\n    for (let i = table.length - 1; i >= 0; i--) {\r\n        for (let j = 0; j < table[0].length; j++) {\r\n            arr[j].push(table[i][j]);\r\n        }\r\n    }\r\n\r\n    return arr;\r\n}\r\n\r\n// 게임 보드에 퍼즐 조각이 맞는가?\r\nfunction isMatch(spot, puzzle) {\r\n    for (let i = 1; i < spot.length; i++) {\r\n        if (spot[i][0] !== puzzle[i][0] || spot[i][1] !== puzzle[i][1])\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction solution(gameBoard, table) {\r\n    // isMatch에서 일치할 경우 해당 퍼즐 조각을 테이블에서 지운다.\r\n    const removePuzzle = (puzzle) => {\r\n        const originPuzzle = puzzle.map((data, idx) => {\r\n            return idx === 0 ? data : [puzzle[0][0] - data[0], puzzle[0][1] - data[1]];\r\n        });\r\n\r\n        originPuzzle.forEach(data => {\r\n            table[data[0]][data[1]] = 0;\r\n        })\r\n    }\r\n\r\n    let answer = 0;\r\n\r\n    // 게임 보드에서 퍼즐을 넣을 수 있는 모양들 파악\r\n    const slots = getPuzzles(gameBoard, 0);\r\n\r\n    // 3번 회전시켜서 보드에 퍼즐을 맞출 수 있는지 파악\r\n    for (let i = 0; i <= 3; i++) {\r\n        if (i !== 0) table = getRotatedTable(table); // 테이블 회전\r\n        const puzzles = getPuzzles(table, 1);\r\n\r\n        // slots vs. puzzles를 비교하고\r\n        puzzles.forEach(puzzle => {\r\n            for (let j = 0; j < slots.length; j++) {\r\n                if (slots[j].length < puzzle.length) break;\r\n\r\n                // 퍼즐이 slots에 맞춰진다면 보드와 테이블에서 지우고 answer을 증가시킬 것\r\n                if (slots[j].length === puzzle.length && isMatch(slots[j], puzzle)) {\r\n                    answer += puzzle.length;\r\n                    removePuzzle(puzzle);\r\n                    slots.splice(j, 1);\r\n                    break;\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    return answer;\r\n}\r\n```\r\n"}}},"pageContext":{"id":"772c54a1-a8e0-53ac-915c-f2ed0533aac0","slug":"coding-test4","__params":{"slug":"coding-test4"}}},
    "staticQueryHashes": ["2841612589","3433077949","3494247862"]}