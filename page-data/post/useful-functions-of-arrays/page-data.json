{
    "componentChunkName": "component---src-pages-post-mdx-slug-js",
    "path": "/post/useful-functions-of-arrays/",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"description\": \"array의 유용한 함수들 소개 (고차함수, 코딩테스트, 인스턴트 메소드, Javascript)\",\n  \"title\": \"JS 코딩테스트 볼 때 유용한 함수 (Array)\",\n  \"tag\": [\"Javascript\", \"코딩테스트\"],\n  \"date\": \"2021-12-21\",\n  \"summary\": \"코딩테스트를 볼 때 유용하게 사용하고 있는 인스턴트 메소드(Array에서)들\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"JavaScript\\uB294 \\uB2E4\\uB978 \\uC5B8\\uC5B4\\uC640 \\uB9C8\\uCC2C\\uAC00\\uC9C0\\uB85C \\uC778\\uC2A4\\uD134\\uC2A4 \\uBA54\\uC18C\\uB4DC\\uB97C \\uC0AC\\uC6A9\\uD560 \\uC218 \\uC788\\uB2E4.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\uC778\\uC2A4\\uD134\\uC2A4 \\uBA54\\uC18C\\uB4DC\")), mdx(\"ul\", {\n    parentName: \"blockquote\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD074\\uB798\\uC2A4\\uAC00 \\uC778\\uC2A4\\uD134\\uC2A4 \\uAC1D\\uCCB4\\uB85C \\uC0DD\\uC131\\uB418\\uC5C8\\uC744 \\uB54C \\uD574\\uB2F9 \\uC778\\uC2A4\\uD134\\uC2A4\\uAC00 \\uC0AC\\uC6A9\\uD560 \\uC218 \\uC788\\uB294 \\uBA54\\uC18C\\uB4DC\"))), mdx(\"p\", null, \"\\uC608\\uB97C \\uB4E4\\uBA74 Array.prototype.sort(), Array.prototype.filter(), Array.prototype.find()\\uC640 \\uAC19\\uC740 \\uAC83\\uB4E4.\"), mdx(\"p\", null, \"\\uAE4A\\uAC8C \\uB4E4\\uC5B4\\uAC00\\uBA74 \\uACE0\\uCC28\\uD568\\uC218\\uC640 \\uD568\\uC218\\uD615 \\uD504\\uB85C\\uADF8\\uB798\\uBC0D \\uAC19\\uC740 \\uC2EC\\uD654 \\uAC1C\\uB150\\uC774 \\uB098\\uC624\\uC9C0\\uB9CC, \\uC774\\uBC88\\uC5D0\\uB294 \\uB2E8\\uC21C\\uD788 \\uCF54\\uD14C\\uC5D0\\uC11C \\uD65C\\uC6A9\\uD560 \\uC218 \\uC788\\uB294 \\uC720\\uC6A9\\uD55C \\uD568\\uC218\\uB4E4\\uC744 \\uC815\\uB9AC\\uD574\\uBCF4\\uB824\\uACE0 \\uD55C\\uB2E4.\"), mdx(\"p\", null, \"Array\\uC758 \\uC778\\uC2A4\\uD134\\uC2A4 \\uBA54\\uC18C\\uB4DC\\uB97C \\uC0AC\\uC6A9\\uD560 \\uB54C \\uC8FC\\uC758\\uD560 \\uC810\\uC740 \\uC6D0\\uBCF8\\uC744 \\uBCC0\\uD615\\uC2DC\\uD0A4\\uB290\\uB0D0\\uC758 \\uC5EC\\uBD80\\uB2E4.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC5B4\\uB5A4 \\uAC83\\uC740 \\uC6D0\\uBCF8 \\uC790\\uCCB4\\uB97C \\uBC14\\uAFB8\\uACE0 \\uB610 \\uC5B4\\uB5A4 \\uAC83\\uC740 \\uC0C8\\uB85C\\uC6B4 \\uBC30\\uC5F4\\uC774\\uB098 \\uACB0\\uACFC\\uB97C \\uB9AC\\uD134\\uD55C\\uB2E4.\")), mdx(\"h2\", null, \"\\uC6D0\\uBCF8 \\uBCC0\\uACBD\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"1. Array.prototype.fill()\")), mdx(\"p\", null, \"\\uBC30\\uC5F4\\uC758 \\uC2DC\\uC791 \\uC778\\uB371\\uC2A4\\uBD80\\uD130 \\uB05D \\uC778\\uB371\\uC2A4\\uC758 \\uC774\\uC804\\uAE4C\\uC9C0 \\uC815\\uC801\\uC778 \\uAC12 \\uD558\\uB098\\uB85C \\uCC44\\uC6B4\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"const arr = new Array(3).fill(0);\\nconsole.log(arr); // [0, 0, 0]\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"2. Array.prototype.sort()\")), mdx(\"p\", null, \"\\uBC30\\uC5F4\\uC758 \\uC694\\uC18C\\uB97C \\uC801\\uC808\\uD55C \\uC704\\uCE58\\uC5D0 \\uC815\\uB82C\\uD55C \\uD6C4 \\uADF8 \\uBC30\\uC5F4\\uC744 \\uBC18\\uD658\\uD55C\\uB2E4.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uADF8\\uB0E5 \\uC815\\uB82C\\uD558\\uBA74 \\uC720\\uB2C8\\uCF54\\uB4DC\\uC5D0 \\uB530\\uB77C \\uC815\\uB82C\\uB41C\\uB2E4.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"const arr = [3, 11, 2, 5, 4, 10, 1];\\narr.sort();\\nconsole.log(arr); // [1, 10, 11, 2, 3, 4, 5]\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB2E4\\uC74C\\uACFC \\uAC19\\uC774 \\uC0AC\\uC6A9\\uD560 \\uC218 \\uC788\\uB2E4.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"arr.sort((a, b) => a - b);\\nconsole.log(arr); [1, 2, 3, 4, 5, 10, 11]\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"3. Array.prototype.splice()\")), mdx(\"p\", null, \"\\uBC30\\uC5F4\\uC5D0\\uC11C \\uC694\\uC18C\\uB97C \\uCD94\\uAC00\\uD558\\uAC70\\uB098 \\uC0AD\\uC81C\\uD55C\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"const arr = [1, 2, 3, 4];\\n\\n// 0\\uBC88 \\uC778\\uB371\\uC2A4\\uBD80\\uD130 1\\uAC1C\\uC758 \\uB370\\uC774\\uD130\\uB97C \\uC0AD\\uC81C\\uD55C\\uB2E4.\\narr.splice(0, 1); // [2, 3, 4]\\n\\n// 0\\uBC88 \\uC778\\uB371\\uC2A4\\uBD80\\uD130 1\\uAC1C\\uC758 \\uB370\\uC774\\uD130\\uB97C \\uC0AD\\uC81C\\uD558\\uACE0 7, 8, 9, 10\\uC744 \\uC0BD\\uC785\\uD55C\\uB2E4.\\narr.splice(0, 1, 7, 8, 9, 10); // [7, 8, 9, 10, 3, 4]\\n\\n// 2\\uBC88 \\uC778\\uB371\\uC2A4\\uBD80\\uD130 2\\uAC1C\\uC758 \\uB370\\uC774\\uD130\\uB97C \\uC0AD\\uC81C\\uD55C\\uB2E4.\\narr.splice(2, 2); // [7, 8, 3, 4]\\n\\n// 0\\uBC88 \\uC778\\uB371\\uC2A4\\uBD80\\uD130 0\\uAC1C\\uC758 \\uB370\\uC774\\uD130\\uB97C \\uC0AD\\uC81C\\uD558\\uACE0 100, 200, 300\\uC744 \\uC0BD\\uC785\\uD55C\\uB2E4.\\narr.splice(0, 0, 100, 200, 300); // [100, 200, 300, 7, 8, 3, 4]\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"array.splice(start, deleteCount, item1, item2...)\")), mdx(\"h2\", null, \"\\uC6D0\\uBCF8 \\uC720\\uC9C0 & \\uBC30\\uC5F4\\uC774\\uB098 \\uAC12 \\uBC18\\uD658 \\uD639\\uC740 \\uC21C\\uD68C\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"1. Array.prototype.filter()\")), mdx(\"p\", null, \"\\uCF5C\\uBC31 \\uD568\\uC218\\uC758 \\uBC18\\uD658 \\uACB0\\uACFC\\uAC00 true\\uC778 \\uC694\\uC18C\\uB9CC \\uBAA8\\uC740 \\uC0C8\\uB85C\\uC6B4 \\uBC30\\uC5F4\\uC744 \\uBC18\\uD658\\uD55C\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"const arr = [1, 2, 3, 100, 200, 300];\\nconst result1 = arr.filter(number => number < 100);\\nconst result2 = arr.filter((number, index) => index < 3);\\n\\nconsole.log(arr); // [1, 2, 3, 100, 200, 300]\\nconsole.log(result1); // [1, 2, 3]\\nconsole.log(result2); // [1, 2, 3]\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"2. Array.prototype.includes()\")), mdx(\"p\", null, \"\\uBC30\\uC5F4\\uC774 \\uC8FC\\uC5B4\\uC9C4 \\uAC12\\uC744 \\uD3EC\\uD568\\uD558\\uB294\\uC9C0 \\uD310\\uBCC4\\uD574 true \\uB610\\uB294 false\\uB97C \\uBC18\\uD658\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"const arr = [1, 2, 3]\\n\\nconsole.log(arr.includes(1)); // true;\\nconsole.log(arr.includes(100)); // false;\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"3. Array.prototype.join()\")), mdx(\"p\", null, \"\\uBC30\\uC5F4\\uC758 \\uBAA8\\uB4E0 \\uC694\\uC18C\\uB97C \\uBB38\\uC790\\uC5F4\\uB85C \\uD569\\uCE5C \\uACB0\\uACFC\\uB97C \\uBC18\\uD658\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"const arr1 = [1, 2, 3];\\nconst arr2 = [\\\"\\uAC00\\\", \\\"\\uB098\\\", \\uB2E4];\\n\\nconsole.log(arr1.join(\\\"\\\")); // \\\"123\\\" -> \\uBB38\\uC790\\uC5F4\\uC774\\uB780 \\uAC78 \\uC720\\uC758\\uD560 \\uAC83\\nconsole.log(arr2.join(\\\"-\\\")); // \\\"\\uAC00-\\uB098-\\uB2E4\\\" -> \\uC694\\uC18C \\uC0AC\\uC774\\uC5D0 \\uBB38\\uC790\\uB97C \\uC0BD\\uC785 \\uAC00\\uB2A5\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"4. Array.prototype.slice()\")), mdx(\"p\", null, \"\\uBC30\\uC5F4\\uC758 \\uC77C\\uBD80\\uB97C \\uCD94\\uCD9C\\uD55C \\uC0C8 \\uBC30\\uC5F4\\uC744 \\uBC18\\uD658\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"slice(begin index, end index) -> begin \\uD3EC\\uD568, end \\uBBF8\\uD3EC\\uD568\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"const arr = [\\\"\\uC77C\\\", \\\"\\uC774\\\", \\\"\\uC0BC\\\", \\\"\\uC0AC\\\"];\\n\\nconsole.log(arr.slice(0)); // [\\\"\\uC77C\\\", \\\"\\uC774\\\", \\\"\\uC0BC\\\", \\\"\\uC0AC\\\"]\\nconsole.log(arr.slice(2)); // [\\\"\\uC0BC\\\", \\\"\\uC0AC\\\"]\\nconsole.log(arr.slice(1, 3)); // [\\\"\\uC774\\\", \\\"\\uC0BC\\\"]\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"5. Array.prototype.every()\")), mdx(\"p\", null, \"\\uBC30\\uC5F4\\uC758 \\uBAA8\\uB4E0 \\uC694\\uC18C\\uAC00 \\uC8FC\\uC5B4\\uC9C4 \\uD310\\uBCC4 \\uCF5C\\uBC31\\uC744 \\uB9CC\\uC871\\uD560 \\uACBD\\uC6B0 true\\uB97C \\uBC18\\uD658\\uD55C\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"const arr = [1, 2, \\\"3\\\"];\\nconsole.log(arr.every(data => typeof data === \\\"number\\\")); // false\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"6. Array.prototype.find()\")), mdx(\"p\", null, \"\\uC8FC\\uC5B4\\uC9C4 \\uD310\\uBCC4 \\uCF5C\\uBC31\\uC744 \\uB9CC\\uC871\\uD558\\uB294 \\uCCAB \\uBC88\\uC9F8 \\uC694\\uC18C\\uB97C \\uBC18\\uD658\\uD55C\\uB2E4. \\uC5C6\\uB2E4\\uBA74 undefined\\uB97C \\uBC18\\uD658\\uD55C\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"const arr = [1, 2, 3, 4, 5];\\nconsole.log(arr.find((n, index) => index >= 3)); // 4\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"7. Array.prototype.findIndex()\")), mdx(\"p\", null, \"\\uC8FC\\uC5B4\\uC9C4 \\uD310\\uBCC4 \\uCF5C\\uBC31\\uC744 \\uB9CC\\uC871\\uD558\\uB294 \\uCCAB \\uBC88\\uC9F8 \\uC694\\uC18C\\uC758 \\uC778\\uB371\\uC2A4\\uB97C \\uBC18\\uD658\\uD55C\\uB2E4. \\uC5C6\\uB2E4\\uBA74 -1\\uC744 \\uBC18\\uD658\\uD55C\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"const arr = [1, 2, 3, 3, 3];\\nconsole.log(arr.find(number => number === 3)); // 2\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"8. Array.prototype.forEach()\")), mdx(\"p\", null, \"\\uBC30\\uC5F4\\uC758 \\uAC01\\uAC01\\uC758 \\uC694\\uC18C\\uC5D0 \\uB300\\uD574 \\uCF5C\\uBC31\\uC744 \\uD638\\uCD9C\\uD55C\\uB2E4 (\\uBC30\\uC5F4\\uC758 \\uAC01 \\uC694\\uC18C\\uB97C \\uC21C\\uD68C\\uD55C\\uB2E4.)\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"const arr = [1, 2, 3, 4];\\narr.forEach(number => console.log(number)); // 1, 2, 3, 4\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"9. Array.prototype.map()\")), mdx(\"p\", null, \"\\uBC30\\uC5F4\\uC758 \\uBAA8\\uB4E0 \\uC694\\uC18C \\uAC01\\uAC01\\uC5D0 \\uB300\\uD558\\uC5EC \\uC8FC\\uC5B4\\uC9C4 \\uCF5C\\uBC31 \\uD568\\uC218\\uB97C \\uD638\\uCD9C\\uD558\\uACE0, \\uADF8 \\uBC18\\uD658\\uAC12\\uC744 \\uBAA8\\uC740 \\uC0C8\\uB85C\\uC6B4 \\uBC30\\uC5F4\\uC744 \\uBC18\\uD658\\uD55C\\uB2E4.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"const arr = [1, 2, 3];\\nconst result = arr.map(number => number + 1);\\n\\nconsole.log(arr); // [1, 2, 3]\\nconsole.log(result); // [2, 3, 4]\\n\")), mdx(\"h2\", null, \"\\uC0DD\\uAC01\\uD560 \\uAC83\\uB4E4\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC774\\uB7F0 \\uD568\\uC218\\uB4E4\\uC740 \\uCF54\\uB4DC\\uB97C \\uC9E4 \\uB54C \\uB9E4\\uC6B0 \\uC720\\uC6A9\\uD558\\uB098 \\uC131\\uB2A5\\uC801\\uC778 \\uC774\\uC288\\uAC00 \\uBC1C\\uC0DD\\uD560 \\uC218 \\uC788\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB530\\uB77C\\uC11C \\uBB34\\uBD84\\uBCC4\\uD558\\uAC8C \\uB0A8\\uC6A9\\uD558\\uAE30\\uBCF4\\uB2E4\\uB294 \\uC801\\uC7AC\\uC801\\uC18C\\uC5D0 \\uC0AC\\uC6A9\\uD558\\uB294 \\uAC83\\uC774 \\uC88B\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD2B9\\uD788 \\uD6A8\\uC728\\uC131 \\uC810\\uC218\\uB97C \\uD3EC\\uD568\\uD558\\uB294 \\uBB38\\uC81C\\uC5D0\\uC11C\\uB294 \\uC2DC\\uAC04 \\uCD08\\uACFC\\uB97C \\uC57C\\uAE30\\uD560 \\uC218 \\uC788\\uB2E4.\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"description":"array의 유용한 함수들 소개 (고차함수, 코딩테스트, 인스턴트 메소드, Javascript)","title":"JS 코딩테스트 볼 때 유용한 함수 (Array)","date":"2021년 12월 21일","tag":["Javascript","코딩테스트"]},"internal":{"content":"---\r\ndescription: \"array의 유용한 함수들 소개 (고차함수, 코딩테스트, 인스턴트 메소드, Javascript)\"\r\ntitle: \"JS 코딩테스트 볼 때 유용한 함수 (Array)\"\r\ntag: [\"Javascript\", \"코딩테스트\"]\r\ndate: \"2021-12-21\"\r\nsummary: \"코딩테스트를 볼 때 유용하게 사용하고 있는 인스턴트 메소드(Array에서)들\"\r\n---\r\n\r\nJavaScript는 다른 언어와 마찬가지로 인스턴스 메소드를 사용할 수 있다.\r\n\r\n> **인스턴스 메소드**\r\n>\r\n> - 클래스가 인스턴스 객체로 생성되었을 때 해당 인스턴스가 사용할 수 있는 메소드\r\n\r\n예를 들면 Array.prototype.sort(), Array.prototype.filter(), Array.prototype.find()와 같은 것들.\r\n\r\n깊게 들어가면 고차함수와 함수형 프로그래밍 같은 심화 개념이 나오지만, 이번에는 단순히 코테에서 활용할 수 있는 유용한 함수들을 정리해보려고 한다.\r\n\r\nArray의 인스턴스 메소드를 사용할 때 주의할 점은 원본을 변형시키느냐의 여부다.\r\n\r\n- 어떤 것은 원본 자체를 바꾸고 또 어떤 것은 새로운 배열이나 결과를 리턴한다.\r\n\r\n## 원본 변경\r\n\r\n**1. Array.prototype.fill()**\r\n\r\n배열의 시작 인덱스부터 끝 인덱스의 이전까지 정적인 값 하나로 채운다.\r\n\r\n```\r\nconst arr = new Array(3).fill(0);\r\nconsole.log(arr); // [0, 0, 0]\r\n```\r\n\r\n**2. Array.prototype.sort()**\r\n\r\n배열의 요소를 적절한 위치에 정렬한 후 그 배열을 반환한다.\r\n\r\n- 그냥 정렬하면 유니코드에 따라 정렬된다.\r\n\r\n```\r\nconst arr = [3, 11, 2, 5, 4, 10, 1];\r\narr.sort();\r\nconsole.log(arr); // [1, 10, 11, 2, 3, 4, 5]\r\n```\r\n\r\n- 다음과 같이 사용할 수 있다.\r\n\r\n```\r\narr.sort((a, b) => a - b);\r\nconsole.log(arr); [1, 2, 3, 4, 5, 10, 11]\r\n```\r\n\r\n**3. Array.prototype.splice()**\r\n\r\n배열에서 요소를 추가하거나 삭제한다.\r\n\r\n```\r\nconst arr = [1, 2, 3, 4];\r\n\r\n// 0번 인덱스부터 1개의 데이터를 삭제한다.\r\narr.splice(0, 1); // [2, 3, 4]\r\n\r\n// 0번 인덱스부터 1개의 데이터를 삭제하고 7, 8, 9, 10을 삽입한다.\r\narr.splice(0, 1, 7, 8, 9, 10); // [7, 8, 9, 10, 3, 4]\r\n\r\n// 2번 인덱스부터 2개의 데이터를 삭제한다.\r\narr.splice(2, 2); // [7, 8, 3, 4]\r\n\r\n// 0번 인덱스부터 0개의 데이터를 삭제하고 100, 200, 300을 삽입한다.\r\narr.splice(0, 0, 100, 200, 300); // [100, 200, 300, 7, 8, 3, 4]\r\n```\r\n\r\n- array.splice(start, deleteCount, item1, item2...)\r\n\r\n## 원본 유지 & 배열이나 값 반환 혹은 순회\r\n\r\n**1. Array.prototype.filter()**\r\n\r\n콜백 함수의 반환 결과가 true인 요소만 모은 새로운 배열을 반환한다.\r\n\r\n```\r\nconst arr = [1, 2, 3, 100, 200, 300];\r\nconst result1 = arr.filter(number => number < 100);\r\nconst result2 = arr.filter((number, index) => index < 3);\r\n\r\nconsole.log(arr); // [1, 2, 3, 100, 200, 300]\r\nconsole.log(result1); // [1, 2, 3]\r\nconsole.log(result2); // [1, 2, 3]\r\n```\r\n\r\n**2. Array.prototype.includes()**\r\n\r\n배열이 주어진 값을 포함하는지 판별해 true 또는 false를 반환\r\n\r\n```\r\nconst arr = [1, 2, 3]\r\n\r\nconsole.log(arr.includes(1)); // true;\r\nconsole.log(arr.includes(100)); // false;\r\n```\r\n\r\n**3. Array.prototype.join()**\r\n\r\n배열의 모든 요소를 문자열로 합친 결과를 반환\r\n\r\n```\r\nconst arr1 = [1, 2, 3];\r\nconst arr2 = [\"가\", \"나\", 다];\r\n\r\nconsole.log(arr1.join(\"\")); // \"123\" -> 문자열이란 걸 유의할 것\r\nconsole.log(arr2.join(\"-\")); // \"가-나-다\" -> 요소 사이에 문자를 삽입 가능\r\n```\r\n\r\n**4. Array.prototype.slice()**\r\n\r\n배열의 일부를 추출한 새 배열을 반환\r\n\r\n- slice(begin index, end index) -> begin 포함, end 미포함\r\n\r\n```\r\nconst arr = [\"일\", \"이\", \"삼\", \"사\"];\r\n\r\nconsole.log(arr.slice(0)); // [\"일\", \"이\", \"삼\", \"사\"]\r\nconsole.log(arr.slice(2)); // [\"삼\", \"사\"]\r\nconsole.log(arr.slice(1, 3)); // [\"이\", \"삼\"]\r\n```\r\n\r\n**5. Array.prototype.every()**\r\n\r\n배열의 모든 요소가 주어진 판별 콜백을 만족할 경우 true를 반환한다.\r\n\r\n```\r\nconst arr = [1, 2, \"3\"];\r\nconsole.log(arr.every(data => typeof data === \"number\")); // false\r\n```\r\n\r\n**6. Array.prototype.find()**\r\n\r\n주어진 판별 콜백을 만족하는 첫 번째 요소를 반환한다. 없다면 undefined를 반환한다.\r\n\r\n```\r\nconst arr = [1, 2, 3, 4, 5];\r\nconsole.log(arr.find((n, index) => index >= 3)); // 4\r\n```\r\n\r\n**7. Array.prototype.findIndex()**\r\n\r\n주어진 판별 콜백을 만족하는 첫 번째 요소의 인덱스를 반환한다. 없다면 -1을 반환한다.\r\n\r\n```\r\nconst arr = [1, 2, 3, 3, 3];\r\nconsole.log(arr.find(number => number === 3)); // 2\r\n```\r\n\r\n**8. Array.prototype.forEach()**\r\n\r\n배열의 각각의 요소에 대해 콜백을 호출한다 (배열의 각 요소를 순회한다.)\r\n\r\n```\r\nconst arr = [1, 2, 3, 4];\r\narr.forEach(number => console.log(number)); // 1, 2, 3, 4\r\n```\r\n\r\n**9. Array.prototype.map()**\r\n\r\n배열의 모든 요소 각각에 대하여 주어진 콜백 함수를 호출하고, 그 반환값을 모은 새로운 배열을 반환한다.\r\n\r\n```\r\nconst arr = [1, 2, 3];\r\nconst result = arr.map(number => number + 1);\r\n\r\nconsole.log(arr); // [1, 2, 3]\r\nconsole.log(result); // [2, 3, 4]\r\n```\r\n\r\n## 생각할 것들\r\n\r\n- 이런 함수들은 코드를 짤 때 매우 유용하나 성능적인 이슈가 발생할 수 있다.\r\n- 따라서 무분별하게 남용하기보다는 적재적소에 사용하는 것이 좋다.\r\n- 특히 효율성 점수를 포함하는 문제에서는 시간 초과를 야기할 수 있다.\r\n"}}},"pageContext":{"id":"20ef5634-32d9-5b35-943b-6dfc711621e1","slug":"useful-functions-of-arrays","__params":{"slug":"useful-functions-of-arrays"}}},
    "staticQueryHashes": ["2841612589","3433077949","3494247862"]}