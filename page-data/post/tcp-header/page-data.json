{
    "componentChunkName": "component---src-pages-post-mdx-slug-js",
    "path": "/post/tcp-header/",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"description\": \"TCP 헤더의 구성과 각 필드에 대하여 정리한 문서\",\n  \"title\": \"TCP 헤더\",\n  \"tag\": [\"CS\", \"네트워크\"],\n  \"date\": \"2021-05-25\",\n  \"summary\": \"TCP 세그먼트 내 헤더 구성과 각 필드에 대해서 알아보자\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"TCP \\uD5E4\\uB354\\uC758 \\uAD6C\\uC131\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://images.velog.io/images/kasran1/post/eb555678-d2d7-4222-89f6-4678e8cfe1af/image.png\",\n    \"alt\": null\n  })), mdx(\"h1\", null, \"\\uAC01 \\uD544\\uB4DC\"), mdx(\"h2\", null, \"Sourse & Destinaion Port Number\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAC01\\uAC01 16\\uBE44\\uD2B8\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uBC1C\\uC2E0\\uC9C0 \\uD3EC\\uD2B8 \\uC8FC\\uC18C\\uC640 \\uBAA9\\uC801\\uC9C0 \\uD3EC\\uD2B8 \\uC8FC\\uC18C\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC591\\uCABD\\uC758 \\uD504\\uB85C\\uC138\\uC2A4\\uB97C \\uC2DD\\uBCC4\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"IP \\uC8FC\\uC18C + \\uD3EC\\uD2B8 \\uBC88\\uD638 = \\uC18C\\uCF13(\\uD3EC\\uD2B8) \\uC8FC\\uC18C\")), mdx(\"h2\", null, \"Sequence Number\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"32bit\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uBC14\\uC774\\uD2B8 \\uB2E8\\uC704\\uB85C \\uAD6C\\uBD84, \\uC21C\\uC11C\\uD654\\uB418\\uB294 \\uBC88\\uD638\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"TCP\\uC5D0\\uC11C \\uD750\\uB984 \\uC81C\\uC5B4\\uB97C \\uD558\\uAC70\\uB098 \\uC2E0\\uB8B0\\uC131 \\uBCF4\\uC7A5, \\uC5F0\\uACB0 \\uBC0F \\uD574\\uC81C\\uC5D0 \\uC0AC\\uC6A9\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC21C\\uC11C \\uAC00\\uB2A5 \\uBC94\\uC704\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"32\\uBE44\\uD2B8\\uC774\\uBBC0\\uB85C 2\\uC758 32\\uC2B9(4,294,967,295)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC784\\uC758 \\uAC12\\uC73C\\uB85C \\uC2DC\\uC791\\uD558\\uC5EC \\uCD5C\\uB300\\uAC12(4,294,967,295) \\uC774\\uD6C4\\uC5D0\\uB294 0\\uC73C\\uB85C \\uC2DC\\uC791\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uCD08\\uAE30 \\uC2DC\\uD000\\uC2A4 \\uB118\\uBC84\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ISN(Initial Sequence Number)\\uB77C\\uACE0 \\uBD80\\uB984\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB09C\\uC218 \\uBC1C\\uC0DD\\uAE30\\uB85C ISN\\uC744 \\uC0DD\\uC131\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB09C\\uC218 \\uBC1C\\uC0DD\\uAE30 : \\uB9E4 4 \\u33B2 \\uB9C8\\uB2E4 1\\uC529 \\uC99D\\uAC00\\uD558\\uB294 12 \\uBE44\\uD2B8 \\uCE74\\uC6B4\\uD130\\uC5D0 \\uC758\\uD574 \\uAD6C\\uD604\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"TCP\\uB294 \\uC591\\uBC29\\uD5A5\\uC774\\uAE30 \\uB54C\\uBB38\\uC5D0 \\uBC29\\uD5A5\\uB9C8\\uB2E4 ISN \\uBC88\\uD638\\uAC00 \\uB2E4\\uB974\\uB2E4.\")))), mdx(\"h2\", null, \"Acknowledgement Number\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"32bit\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC751\\uB2F5\\uC5D0 \\uAE30\\uB300\\uD558\\uB294 Ack \\uBC88\\uD638 = \\uC0C1\\uB300\\uC5D0\\uAC8C \\uBCF4\\uB0B8 Seq \\uBC88\\uD638 + 1\")), mdx(\"h2\", null, \"\\uD5E4\\uB354 \\uAE38\\uC774 \\uD544\\uB4DC\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD5E4\\uB354 \\uAE38\\uC774\\uB97C 4\\uBC14\\uC774\\uD2B8(32\\uBE44\\uD2B8) \\uB2E8\\uC704\\uB85C \\uD45C\\uC2DC\")), mdx(\"h2\", null, \"\\uD50C\\uB798\\uADF8 \\uBE44\\uD2B8\\uB4E4\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"6bit(\\uAC01\\uAC01 URG, ACK, PSH, RST, SYN, FIN)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"TCP \\uD328\\uD0B7 \\uC804\\uB2EC\\uC5D0 \\uAD00\\uB828\\uB418\\uC5B4 TCP \\uD68C\\uC120, \\uB370\\uC774\\uD130 \\uAD00\\uB9AC \\uC81C\\uC5B4 \\uB4F1\\uC5D0 \\uC4F0\\uC784\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD750\\uB984 \\uC81C\\uC5B4, \\uC5F0\\uACB0 \\uC0DD\\uC131, \\uC5F0\\uACB0 \\uD574\\uC81C, \\uC5F0\\uACB0 \\uB9AC\\uC14B, \\uB370\\uC774\\uD130 \\uC804\\uC1A1 \\uBAA8\\uB4DC...\")), mdx(\"h2\", null, \"\\uC708\\uB3C4\\uC6B0 \\uD06C\\uAE30\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"16bit\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD750\\uB984 \\uC81C\\uC5B4\\uB97C \\uC704\\uD574 \\uC0AC\\uC6A9\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC0C1\\uB300\\uBC29\\uC5D0\\uAC8C \\uC790\\uC2E0\\uC758 \\uC218\\uC2E0 \\uBC84\\uD37C \\uC5EC\\uC720\\uC6A9\\uB7C9 \\uD06C\\uAE30\\uB97C \\uC9C0\\uC18D\\uC801\\uC73C\\uB85C \\uD1B5\\uBCF4(\\uD328\\uD0B7\\uC744 \\uBCF4\\uB0BC \\uB54C\\uB9C8\\uB2E4, \\uB9E4\\uBC88 \\uC5C5\\uB370\\uC774\\uD2B8)\")), mdx(\"h2\", null, \"Checksum\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"16bit\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC5D0\\uB7EC \\uAC80\\uCD9C\\uC5D0 \\uC0AC\\uC6A9\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC1A1\\uC2E0\\uCE21\\uC5D0\\uC11C, \\uC804\\uC1A1\\uD560 \\uBAA8\\uB4E0 \\uB370\\uC774\\uD130\\uB97C 16 \\uBE44\\uD2B8 \\uC6CC\\uB4DC \\uB2E8\\uC704\\uB85C \\uAD6C\\uBD84\\uD558\\uACE0,\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"1\\uC758 \\uBCF4\\uC218\\uB97C \\uCDE8\\uD558\\uACE0, \\uADF8 \\uD569\\uC5D0 \\uB300\\uD55C \\uACB0\\uACFC\\uB97C \\uC804\\uC1A1\\uD558\\uBA74,\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC218\\uC2E0\\uCE21\\uC5D0\\uC11C, \\uAC19\\uC740 \\uD569\\uC744 \\uD574\\uBCF4\\uC544\\uC11C \\uC624\\uB958\\uB97C \\uAC80\\uCD9C\\uD558\\uB294 \\uBC29\\uC2DD\\n\", mdx(\"img\", {\n    parentName: \"li\",\n    \"src\": \"https://images.velog.io/images/kasran1/post/70ff24b1-8adf-4e20-a4a9-e16cec3d8da7/image.png\",\n    \"alt\": null\n  }))))), mdx(\"h2\", null, \"Urgent pointer\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"16bit\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"TCP \\uD328\\uD0B7\\uC5D0 \\uD3EC\\uD568\\uB41C \\uAE34\\uAE09 \\uB370\\uC774\\uD130\\uC758 \\uB9C8\\uC9C0\\uB9C9 \\uC21C\\uC11C\\uBC88\\uD638(Seq)\")), mdx(\"h2\", null, \"\\uC635\\uC158\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uCD5C\\uB300 40\\uBC14\\uC774\\uD2B8\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"TCP MSS \\uC635\\uC158\"), \"\\uC744 \\uD611\\uC0C1\\uD558\\uAC70\\uB098, \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\uC8FC\\uC5B4\\uC9C4 \\uC708\\uB3C4\\uC6B0 \\uD06C\\uAE30\\uBCF4\\uB2E4 \\uB354 \\uD06C\\uAC8C \\uC0AC\\uC6A9\"), \"\\uD558\\uAC70\\uB098 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\uC120\\uD0DD\\uD655\\uC778\\uC751\\uB2F5\"), \"\\uC744 \\uD558\\uAC70\\uB098 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\uD0C0\\uC784\\uC2A4\\uD0EC\\uD504 \\uC635\\uC158\"), \" \\uC815\\uC758 \\uB4F1\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"description":"TCP 헤더의 구성과 각 필드에 대하여 정리한 문서","title":"TCP 헤더","date":"2021년 05월 25일","tag":["CS","네트워크"]},"internal":{"content":"---\r\ndescription: \"TCP 헤더의 구성과 각 필드에 대하여 정리한 문서\"\r\ntitle: \"TCP 헤더\"\r\ntag: [\"CS\", \"네트워크\"]\r\ndate: \"2021-05-25\"\r\nsummary: \"TCP 세그먼트 내 헤더 구성과 각 필드에 대해서 알아보자\"\r\n---\r\n\r\n# TCP 헤더의 구성\r\n\r\n![](https://images.velog.io/images/kasran1/post/eb555678-d2d7-4222-89f6-4678e8cfe1af/image.png)\r\n\r\n# 각 필드\r\n\r\n## Sourse & Destinaion Port Number\r\n\r\n- 각각 16비트\r\n- 발신지 포트 주소와 목적지 포트 주소다.\r\n- 양쪽의 프로세스를 식별\r\n- IP 주소 + 포트 번호 = 소켓(포트) 주소\r\n\r\n## Sequence Number\r\n\r\n- 32bit\r\n- 바이트 단위로 구분, 순서화되는 번호\r\n  - TCP에서 흐름 제어를 하거나 신뢰성 보장, 연결 및 해제에 사용\r\n- 순서 가능 범위\r\n  - 32비트이므로 2의 32승(4,294,967,295)\r\n  - 임의 값으로 시작하여 최대값(4,294,967,295) 이후에는 0으로 시작\r\n- 초기 시퀀스 넘버\r\n  - ISN(Initial Sequence Number)라고 부름\r\n  - 난수 발생기로 ISN을 생성\r\n    - 난수 발생기 : 매 4 ㎲ 마다 1씩 증가하는 12 비트 카운터에 의해 구현\r\n  - TCP는 양방향이기 때문에 방향마다 ISN 번호가 다르다.\r\n\r\n## Acknowledgement Number\r\n\r\n- 32bit\r\n- 응답에 기대하는 Ack 번호 = 상대에게 보낸 Seq 번호 + 1\r\n\r\n## 헤더 길이 필드\r\n\r\n- 헤더 길이를 4바이트(32비트) 단위로 표시\r\n\r\n## 플래그 비트들\r\n\r\n- 6bit(각각 URG, ACK, PSH, RST, SYN, FIN)\r\n- TCP 패킷 전달에 관련되어 TCP 회선, 데이터 관리 제어 등에 쓰임\r\n- 흐름 제어, 연결 생성, 연결 해제, 연결 리셋, 데이터 전송 모드...\r\n\r\n## 윈도우 크기\r\n\r\n- 16bit\r\n- 흐름 제어를 위해 사용\r\n- 상대방에게 자신의 수신 버퍼 여유용량 크기를 지속적으로 통보(패킷을 보낼 때마다, 매번 업데이트)\r\n\r\n## Checksum\r\n\r\n- 16bit\r\n- 에러 검출에 사용\r\n  - 송신측에서, 전송할 모든 데이터를 16 비트 워드 단위로 구분하고,\r\n  - 1의 보수를 취하고, 그 합에 대한 결과를 전송하면,\r\n  - 수신측에서, 같은 합을 해보아서 오류를 검출하는 방식\r\n    ![](https://images.velog.io/images/kasran1/post/70ff24b1-8adf-4e20-a4a9-e16cec3d8da7/image.png)\r\n\r\n## Urgent pointer\r\n\r\n- 16bit\r\n- TCP 패킷에 포함된 긴급 데이터의 마지막 순서번호(Seq)\r\n\r\n## 옵션\r\n\r\n- 최대 40바이트\r\n- `TCP MSS 옵션`을 협상하거나, `주어진 윈도우 크기보다 더 크게 사용`하거나 `선택확인응답`을 하거나 `타임스탬프 옵션` 정의 등\r\n"}}},"pageContext":{"id":"dcccb61c-3cab-50f9-983e-cafb2242cdce","slug":"tcp-header","__params":{"slug":"tcp-header"}}},
    "staticQueryHashes": ["2841612589","3433077949","3494247862"]}